"use strict";(self.webpackChunkveezoo_docs=self.webpackChunkveezoo_docs||[]).push([[1568],{3905:function(e,n,t){t.d(n,{Zo:function(){return d},kt:function(){return f}});var a=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function r(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},s=Object.keys(e);for(a=0;a<s.length;a++)t=s[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)t=s[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var o=a.createContext({}),p=function(e){var n=a.useContext(o),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},d=function(e){var n=p(e.components);return a.createElement(o.Provider,{value:n},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,s=e.originalType,o=e.parentName,d=r(e,["components","mdxType","originalType","parentName"]),c=p(t),m=i,f=c["".concat(o,".").concat(m)]||c[m]||u[m]||s;return t?a.createElement(f,l(l({ref:n},d),{},{components:t})):a.createElement(f,l({ref:n},d))}));function f(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var s=t.length,l=new Array(s);l[0]=m;var r={};for(var o in n)hasOwnProperty.call(n,o)&&(r[o]=n[o]);r.originalType=e,r[c]="string"==typeof e?e:i,l[1]=r;for(var p=2;p<s;p++)l[p]=t[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},5811:function(e,n,t){t.r(n),t.d(n,{assets:function(){return d},contentTitle:function(){return o},default:function(){return f},frontMatter:function(){return r},metadata:function(){return p},toc:function(){return c}});var a=t(7462),i=t(3366),s=(t(7294),t(3905)),l=["components"],r={id:"sql",title:"sql / name_sql / synonym_sql"},o=void 0,p={unversionedId:"reference/kb-layer/class/sql",id:"reference/kb-layer/class/sql",title:"sql / name_sql / synonym_sql",description:"Definition",source:"@site/docs/reference/kb-layer/class/sql.md",sourceDirName:"reference/kb-layer/class",slug:"/reference/kb-layer/class/sql",permalink:"/docs/reference/kb-layer/class/sql",draft:!1,editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/reference/kb-layer/class/sql.md",tags:[],version:"current",frontMatter:{id:"sql",title:"sql / name_sql / synonym_sql"},sidebar:"docs",previous:{title:"What is a class?",permalink:"/docs/reference/kb-layer/class"},next:{title:"creation_date",permalink:"/docs/reference/kb-layer/class/creation_date"}},d={},c=[{value:"Definition",id:"definition",level:2},{value:"Usage",id:"usage",level:2},{value:"Class defined by Table",id:"class-defined-by-table",level:3},{value:"Class defined by Column",id:"class-defined-by-column",level:3},{value:"Advanced: Class defined by Table SQL",id:"advanced-class-defined-by-table-sql",level:3},{value:"Advanced: Class with Custom Entities defined by a SQL",id:"advanced-class-with-custom-entities-defined-by-a-sql",level:3}],u={toc:c},m="wrapper";function f(e){var n=e.components,t=(0,i.Z)(e,l);return(0,s.kt)(m,(0,a.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,s.kt)("h2",{id:"definition"},"Definition"),(0,s.kt)("p",null,"The ",(0,s.kt)("inlineCode",{parentName:"p"},"sql")," property (and related ones) specifies how the class is represented in the database (as a table or a column), what a unique key (",(0,s.kt)("inlineCode",{parentName:"p"},"sql"),") for this class is and how its ",(0,s.kt)("a",{parentName:"p",href:"/docs/reference/kb-layer/entity"},"entities")," are generated from SQL, if it should have any."),(0,s.kt)("h2",{id:"usage"},"Usage"),(0,s.kt)("p",null,"A class can be defined by a table, a column or a SQL. Let's take the example of a table ",(0,s.kt)("inlineCode",{parentName:"p"},"customer(id, name, status)"),"."),(0,s.kt)("p",null,"In this example, Veezoo will generate two classes: ",(0,s.kt)("inlineCode",{parentName:"p"},"kb.Customer")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"kb.Customer.Status"),"."),(0,s.kt)("h3",{id:"class-defined-by-table"},"Class defined by Table"),(0,s.kt)("p",null,"In the case of ",(0,s.kt)("inlineCode",{parentName:"p"},"kb.Customer"),", we have a class defined by a table ",(0,s.kt)("inlineCode",{parentName:"p"},"customer"),"."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-json"},'import: [\n    db.postgres.movie_db.public.customer\n]\n\nkb {\n    class Customer {\n        name.en: "Customer"\n\n        from_table: customer\n        // e.g. 00042\n        sql: "${customer.id}"\n        // e.g. [00042] Arthur Dent\n        name_sql.en: "\'[\' || ${customer.id} || \'] \' || ${customer.name}"        \n        // e.g. Arthur Dent\n        synonym_sql.en: "${customer.name}"\n\n        ...\n    }\n}\n')),(0,s.kt)("p",null,"Table Classes need to have"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"a reference to the table ",(0,s.kt)("inlineCode",{parentName:"li"},"from_table: customer")," and "),(0,s.kt)("li",{parentName:"ul"},"a SQL expression that uniquely identifies it ",(0,s.kt)("inlineCode",{parentName:"li"},'sql: "${customer.id}"'),", used for Joins as a key.")),(0,s.kt)("p",null,"Optionally, if it is a class with values that you may want to refer to in questions (e.g. a specific customer), it makes sense to define the name for the entities of this class."),(0,s.kt)("p",null,"To do this you will add a ",(0,s.kt)("inlineCode",{parentName:"p"},"name_sql")," with a language tag (e.g. ",(0,s.kt)("inlineCode",{parentName:"p"},".en")," for English), specifying how the ",(0,s.kt)("a",{parentName:"p",href:"/docs/reference/kb-layer/general/name"},"name")," of the entity will be generated. If no ",(0,s.kt)("inlineCode",{parentName:"p"},"name_sql")," is defined, Veezoo will use the ",(0,s.kt)("inlineCode",{parentName:"p"},"sql")," as the default ",(0,s.kt)("inlineCode",{parentName:"p"},"name_sql")," expression."),(0,s.kt)("p",null,"There may be ",(0,s.kt)("a",{parentName:"p",href:"/docs/reference/kb-layer/general/synonym"},"synonyms")," in the table that you also want to use for the entities. These you will define using the property ",(0,s.kt)("inlineCode",{parentName:"p"},"synonym_sql")," with the appropriate language tag.\nIn our example, after clicking on the ",(0,s.kt)("inlineCode",{parentName:"p"},"Sync Entities")," button in the Editor when you have the class file open, you will get entities like this:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-json"},'kb.Customer {\n    entity 00042_Arthur_Dent_1234 {         \n        name.en: "[00042] Arthur Dent"\n\n        synonym.en: "Arthur Dent"\n\n        id: "00042"\n    }\n    ...\n}\n\n')),(0,s.kt)("p",null,"In the case of a class called ",(0,s.kt)("inlineCode",{parentName:"p"},"kb.Order"),", you may prefer not to have any entities defined. This means ",(0,s.kt)("inlineCode",{parentName:"p"},"name_sql")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"synonym_sql")," will be left out."),(0,s.kt)("h3",{id:"class-defined-by-column"},"Class defined by Column"),(0,s.kt)("p",null,"In our example, the class ",(0,s.kt)("inlineCode",{parentName:"p"},"kb.Status")," was defined by the column ",(0,s.kt)("inlineCode",{parentName:"p"},"status")," in the ",(0,s.kt)("inlineCode",{parentName:"p"},"customer")," table. Let's take a look at how it would be defined in VKL."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-json"},'import: [\n    db.postgres.movie_db.public.customer\n]\n\nkb {\n    // inside the file for the class Customer\n    class Customer {\n\n        ...\n\n\n        class Status {\n            name.en: "Status"\n        \n            // e.g. ACTIVE\n            sql: "${customer.status}"\n        }\n    }\n}\n')),(0,s.kt)("p",null,"Each entity of the class ",(0,s.kt)("inlineCode",{parentName:"p"},"kb.Customer.Status")," is uniquely defined by the ",(0,s.kt)("inlineCode",{parentName:"p"},"sql")," expression, which also happens to be the default ",(0,s.kt)("inlineCode",{parentName:"p"},"name_sql")," for the entities.\nIn this case, there is no ",(0,s.kt)("inlineCode",{parentName:"p"},"synonym_sql")," defined."),(0,s.kt)("h3",{id:"advanced-class-defined-by-table-sql"},"Advanced: Class defined by Table SQL"),(0,s.kt)("p",null,"Let's assume that the ",(0,s.kt)("inlineCode",{parentName:"p"},"customer")," table is split across two tables ",(0,s.kt)("inlineCode",{parentName:"p"},"corporate_customer")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"private_customer"),", both with the same set of columns for simplicity, and you want a single class consisting of both tables.\nYou can achieve this using ",(0,s.kt)("inlineCode",{parentName:"p"},"table_sql")," with a SQL query that returns their union, replacing ",(0,s.kt)("inlineCode",{parentName:"p"},"from_table")," as described for ",(0,s.kt)("a",{parentName:"p",href:"#class-defined-by-table"},"table classes"),"."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-json"},'kb {\n    class Customer {\n        name.en: "Customer"\n\n        table_sql:\n             """(SELECT * FROM movie_db.public.corporate_customer)\n                 UNION\n                (SELECT * FROM movie_db.public.private_customer)"""\n        // These now use $table.column_name, where column_name is the SQL identifier \n        //  (which possibly needs to be escaped, depending on the SQL dialect)\n        sql: "$table.id"\n        name_sql.en: "\'[\' || $table.id || \'] \' || $table.name"\n        synonym_sql.en: "$table.name"\n\n        class Status {\n            name.en: "Status"\n        \n            // Same for attributes of the class, use ${ClassName}.column_name\n            sql: "${Customer}.status"\n        }\n    }\n}\n')),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"table_sql")," also allows filtering, adding or transforming columns and joining other tables, and is thus very powerful."),(0,s.kt)("p",null,"Other than replacing ",(0,s.kt)("inlineCode",{parentName:"p"},"from_table")," by ",(0,s.kt)("inlineCode",{parentName:"p"},"table_sql")," and adapting SQLs based on it, a class defined using a table SQL will behave the same as a ",(0,s.kt)("a",{parentName:"p",href:"#class-defined-by-table"},"table class"),"."),(0,s.kt)("admonition",{type:"info"},(0,s.kt)("p",{parentName:"admonition"},"Prefer ",(0,s.kt)("a",{parentName:"p",href:"#class-defined-by-table"},"simple table classes")," over using ",(0,s.kt)("inlineCode",{parentName:"p"},"table_sql")," if possible, as Veezoo will be able to help you more, for example you can import columns from the table and Veezoo will generate VKL for them.")),(0,s.kt)("h3",{id:"advanced-class-with-custom-entities-defined-by-a-sql"},"Advanced: Class with Custom Entities defined by a SQL"),(0,s.kt)("p",null,"The last way you can define a class is over a SQL query defining the entities, which follows a specific format."),(0,s.kt)("p",null,"Let's take the example of two tables ",(0,s.kt)("inlineCode",{parentName:"p"},"customer(id, email)")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"profile(id, customer_id, name)"),". For whatever reason, we have now two tables with information about a customer. For simplicity sake, let's assume that ",(0,s.kt)("inlineCode",{parentName:"p"},"profile")," only has one entry per customer."),(0,s.kt)("p",null,"Now, we don't want to make ",(0,s.kt)("inlineCode",{parentName:"p"},"profile")," accessible over Veezoo, since it is just extra information that was separated technically in different tables. Our business users have no clue why it is separated and they don't want to care about it."),(0,s.kt)("p",null,"What we will do instead now is to join both these tables so we can generate entities of the class ",(0,s.kt)("inlineCode",{parentName:"p"},"kb.Customer")," with nice-looking names."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-json"},'import: [\n    db.postgres.movie_db.public.customer\n]\n\nkb {\n    class Customer {\n        name.en: "Customer"\n\n        // this tag is required\n        tag: DB_CustomSQLSemanticLink\n        \n        // e.g. 00042\n        sql: "${customer.id}"\n        from_table: customer\n\n        entities_custom_sql: """\n            SELECT\n                c.id AS ID,\n                \'[\' || c.id || \'] \' || p.name AS LABEL_EN_MAIN,\n                p.name AS LABEL_EN_1\n            FROM\n                customer c JOIN profile p ON c.id = p.customer_id\n        """\n    }\n}\n')),(0,s.kt)("p",null,"As you can notice, instead of a ",(0,s.kt)("inlineCode",{parentName:"p"},"name_sql"),", we defined an ",(0,s.kt)("inlineCode",{parentName:"p"},"entities_custom_sql"),"."),(0,s.kt)("p",null,"Let's take a closer look at the SQL:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT\n    c.id AS ID,\n    '[' || c.id || '] ' || p.name AS LABEL_EN_MAIN,\n    p.name AS LABEL_EN_1\nFROM\n    customer c JOIN profile p ON c.id = p.customer_id\n")),(0,s.kt)("p",null,"An ",(0,s.kt)("inlineCode",{parentName:"p"},"entities_custom_sql")," always needs to have in the SELECT:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"one ",(0,s.kt)("inlineCode",{parentName:"li"},"ID")," column, coinciding with the ",(0,s.kt)("inlineCode",{parentName:"li"},"sql"),", and "),(0,s.kt)("li",{parentName:"ul"},"a ",(0,s.kt)("inlineCode",{parentName:"li"},"LABEL_{LANGUAGE-TAG}_MAIN"),", which will define the ",(0,s.kt)("inlineCode",{parentName:"li"},"name")," of entities, similar to a ",(0,s.kt)("inlineCode",{parentName:"li"},"name_sql")," in the previous cases.")),(0,s.kt)("p",null,"Optionally, every other ",(0,s.kt)("inlineCode",{parentName:"p"},"LABEL_{LANGUAGE-TAG}_*")," defined is used the same way as ",(0,s.kt)("inlineCode",{parentName:"p"},"synonym_sql")," is used in the previous sections."),(0,s.kt)("p",null,"It is important to notice that this SQL is only used to generate entities during Sync time, not query time. If you are interested in using custom SQLs during query time, please refer to virtual_table in the ",(0,s.kt)("inlineCode",{parentName:"p"},"database")," part."))}f.isMDXComponent=!0}}]);