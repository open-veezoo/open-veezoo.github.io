"use strict";(self.webpackChunkveezoo_docs=self.webpackChunkveezoo_docs||[]).push([[1523],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return h}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),u=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=u(e.components);return a.createElement(s.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),c=u(n),m=r,h=c["".concat(s,".").concat(m)]||c[m]||d[m]||i;return n?a.createElement(h,o(o({ref:t},p),{},{components:n})):a.createElement(h,o({ref:t},p))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[c]="string"==typeof e?e:r,o[1]=l;for(var u=2;u<i;u++)o[u]=n[u];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5870:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return s},default:function(){return h},frontMatter:function(){return l},metadata:function(){return u},toc:function(){return c}});var a=n(7462),r=n(3366),i=(n(7294),n(3905)),o=["components"],l={id:"rule",title:"rule",sidebar_label:"Rule"},s=void 0,u={unversionedId:"reference/kb-layer/rule/rule",id:"reference/kb-layer/rule/rule",title:"rule",description:"Definition",source:"@site/docs/reference/kb-layer/rule/rule.md",sourceDirName:"reference/kb-layer/rule",slug:"/reference/kb-layer/rule/",permalink:"/docs/reference/kb-layer/rule/",draft:!1,tags:[],version:"current",frontMatter:{id:"rule",title:"rule",sidebar_label:"Rule"},sidebar:"reference",previous:{title:"measure",permalink:"/docs/reference/kb-layer/measure/"},next:{title:"VQL (Veezoo Query Language)",permalink:"/docs/reference/kb-layer/vql/"}},p={},c=[{value:"Definition",id:"definition",level:2},{value:"Structure",id:"structure",level:2},{value:"rule_pattern",id:"rule_pattern",level:3},{value:"@add_if_not_exists { ... }",id:"add_if_not_exists---",level:4},{value:"@remove { ... }",id:"remove---",level:4},{value:"@replace { ... } with { ... }",id:"replace----with---",level:4},{value:"for_user_role (optional)",id:"for_user_role-optional",level:3},{value:"rule_tag (optional)",id:"rule_tag-optional",level:3},{value:"Semantic Rewriting stage",id:"semantic-rewriting-stage",level:4},{value:"Logic Rewriting stage",id:"logic-rewriting-stage",level:4},{value:"comment (optional)",id:"comment-optional",level:3}],d={toc:c},m="wrapper";function h(e){var t=e.components,n=(0,r.Z)(e,o);return(0,i.kt)(m,(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"definition"},"Definition"),(0,i.kt)("p",null,"In different cases we want to rewrite the VQL Veezoo generates from a user's question. We might want to add filters, change which function Veezoo uses in specific situations, correct potential errors, or insert our own definitions of concepts. With ",(0,i.kt)("inlineCode",{parentName:"p"},"Measures")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"default filters")," Veezoo provides frameworks to rewrite VQL in a simple and straightforward fashion. ",(0,i.kt)("inlineCode",{parentName:"p"},"rules")," are a more general method. They detect patterns in the generated VQL and modify them in a desired fashion. "),(0,i.kt)("p",null,"For almost all cases there is a way to achieve the desired result using other tools than rules, in which case we strongly recommend to use the alternative instead."),(0,i.kt)("h2",{id:"structure"},"Structure"),(0,i.kt)("p",null,"Rules follow this structure:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'rule only_show_active_customers {\n    rule_pattern: """\n        // Matching Pattern\n        var customer: kb.Customer\n\n        // Modification Pattern\n        @add_if_not_exists {\n            customer.is_active = true\n        }\n    """\n    \n    // specify which user role should have this logic applied\n    for_user_role: "Marketing"\n    \n    // specify the kind of rule\n    rule_tag: meta.SemanticLogicTag\n    \n    comment: "This is a description of the rule and its motivations."\n}\n')),(0,i.kt)("h3",{id:"rule_pattern"},"rule_pattern"),(0,i.kt)("p",null,"The rule pattern consists of two parts: the ",(0,i.kt)("strong",{parentName:"p"},"Matching Pattern")," and the ",(0,i.kt)("strong",{parentName:"p"},"Modification Pattern"),". "),(0,i.kt)("p",null,"The ",(0,i.kt)("strong",{parentName:"p"},"Matching Pattern")," can be a variety of VQL statements and serves two functions:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("em",{parentName:"li"},"Variable declaration"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"var customer: kb.Customers")," declares the variable ",(0,i.kt)("inlineCode",{parentName:"li"},"customer"),", which then can be referred to later on."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("em",{parentName:"li"},"Rule condition"),": Veezoo checks the ",(0,i.kt)("em",{parentName:"li"},"Matching Pattern")," to see whether a rule should be applied. This rule comes into play only if everything listed in the ",(0,i.kt)("em",{parentName:"li"},"Matching Pattern")," is also found in the VQL of the Question. ")),(0,i.kt)("p",null,"Additionally we can use these functions to decide if the rule should be applied or not:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("em",{parentName:"li"},"@missing { ... }"),": the rule should not be used, if the pattern in the brackets is present"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("em",{parentName:"li"},"{ ... } @or { ... }"),": the rule should be applied when either pattern is present")),(0,i.kt)("p",null,"The ",(0,i.kt)("strong",{parentName:"p"},"Modification Pattern")," defines the actual behavior of the rule. It takes its arguments from within its brackets. The following are the available ",(0,i.kt)("em",{parentName:"p"},"Modification Patterns"),":"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("em",{parentName:"li"},"@add_if_not_exists { ... }"),": adds a pattern to the VQL"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("em",{parentName:"li"},"@remove { ... }"),": removes a pattern from the VQL, if present"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("em",{parentName:"li"},"@remove_connected { ... }"),": similar to ",(0,i.kt)("em",{parentName:"li"},"@remove"),", but also removes all classes connected to the pattern as well"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("em",{parentName:"li"},"@replace { ... } with { ... }"),": replaces a specific pattern with another")),(0,i.kt)("h4",{id:"add_if_not_exists---"},"@add_if_not_exists { ... }"),(0,i.kt)("p",null,"This ",(0,i.kt)("em",{parentName:"p"},"Modification Pattern")," is mostly used to add additional constraints or filters, the user didn't explicitly ask for, but we, as the data team, still want to be there. Let's look at the example given above again:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'rule only_show_active_customers {\n    rule_pattern: """\n        var customer: kb.Customer\n\n        @add_if_not_exists {\n            customer.is_active = true\n        }\n    """\n\n    for_user_role: "Marketing" \n}\n')),(0,i.kt)("p",null,"In this example, we want to ensure that users with the ",(0,i.kt)("inlineCode",{parentName:"p"},"user_role")," ",(0,i.kt)("em",{parentName:"p"},"Marketing")," can only see active customers."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"In the first line we define the variable ",(0,i.kt)("inlineCode",{parentName:"li"},"customer")," and simultaneously state that this rule should be triggered if the pattern ",(0,i.kt)("inlineCode",{parentName:"li"},"kb.Customer")," is present in the VQL."),(0,i.kt)("li",{parentName:"ul"},"We then use the ",(0,i.kt)("em",{parentName:"li"},"Modification Pattern"),": if the filter ",(0,i.kt)("inlineCode",{parentName:"li"},"customer.is_active = true")," is not present, we add it, such that all customers shown in the result are active."),(0,i.kt)("li",{parentName:"ul"},"We add the ",(0,i.kt)("inlineCode",{parentName:"li"},"for_user_role")," such that this rule only applies to the marketing users (as explained later)")),(0,i.kt)("p",null,"A similar effect to this can be achieved by using ",(0,i.kt)("a",{parentName:"p",href:"/docs/reference/kb-layer/class/default_filter"},"default filters"),". There are two differences: default filters can be removed by business users, where as this rule will always be applied, and default filters can't be set for specific user roles."),(0,i.kt)("h4",{id:"remove---"},"@remove { ... }"),(0,i.kt)("p",null,"With this ",(0,i.kt)("em",{parentName:"p"},"Modification Pattern")," we can remove filters that Veezoo might add, but we don't want in certain cases."),(0,i.kt)("p",null,"Consider the following scenario: we have two datasets, ",(0,i.kt)("em",{parentName:"p"},"Employees")," containing information about employees, including their status (active or inactive), and ",(0,i.kt)("em",{parentName:"p"},"Transactions")," containing records of sales transactions, each associated with an employee. We want to calculate the total sales amount without filtering out inactive employees, as we need to consider sales made by all employees, regardless of their current status."),(0,i.kt)("p",null,"To this end, we use the following rule:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'rule total_sales_all_employees {\n    rule_pattern: \n    """\n        var transactions: kb.Transactions\n        var employee: kb.Employee\n        sum(transactions.amount)\n        transactions.with_Employee = employee\n        @remove {\n             # Remove the filter that only includes active employees\n            employee.is_Active = true\n        }\n        """\n}\n')),(0,i.kt)("p",null,"In the ",(0,i.kt)("em",{parentName:"p"},"Matching Pattern")," we first define the variables ",(0,i.kt)("inlineCode",{parentName:"p"},"transactions")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"employee")," and ensure that the rule is only applied when calculating the sum total of transactions. We specify that transactions is linked with employee using ",(0,i.kt)("inlineCode",{parentName:"p"},"transactions.with_Employee = employee"),"."),(0,i.kt)("p",null,"Using the ",(0,i.kt)("em",{parentName:"p"},"@remove")," pattern, we then explicitly remove the filter that restricts the data to only active employees (",(0,i.kt)("inlineCode",{parentName:"p"},"employee.is_Active = true"),")."),(0,i.kt)("p",null,"By applying this rule, we ensure that the total sales are calculated without excluding any employees based on their status. This way, sales made by inactive employees are also considered in the total, providing a complete picture of sales performance."),(0,i.kt)("h4",{id:"replace----with---"},"@replace { ... } with { ... }"),(0,i.kt)("p",null,"This ",(0,i.kt)("em",{parentName:"p"},"Modification Patterns")," is used to replace lines in VQL. A typical example of this is, when Veezoo would normally use a certain function, but we want to use a different one in a specific case. In the following example, we will show two uses of this rule pattern working together. "),(0,i.kt)("p",null,"Consider the following situation. We have an ",(0,i.kt)("inlineCode",{parentName:"p"},"Orders")," dataset where each order has an ",(0,i.kt)("inlineCode",{parentName:"p"},"Order_Qty")," column. The ",(0,i.kt)("inlineCode",{parentName:"p"},"Order_Qty")," values are adjusted based on business logic, such as 1 for regular orders, 0 for orders that shouldn't be counted, and -1 for orders that should decrease the count. This should be used when counting the orders instead of a ",(0,i.kt)("inlineCode",{parentName:"p"},"COUNT DISTINCT")," on an order id."),(0,i.kt)("p",null,"This rule does this: it first checks if the question contains ",(0,i.kt)("inlineCode",{parentName:"p"},"kb.Orders"),", and if so replaces all instances of the function ",(0,i.kt)("inlineCode",{parentName:"p"},"count(orders)")," with ",(0,i.kt)("inlineCode",{parentName:"p"},"sum(orders.Order_Qty)"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'rule Substitute_Count_For_Sum {            \n    rule_pattern: \n     """\n        var orders: kb.Orders\n        @replace {\n            count(orders)\n        } with {\n            sum(orders.Order_Qty)\n        }\n        """\n}\n')),(0,i.kt)("p",null,"In a next step, we would like to adapt the average function. Let's say we would like to figure out the average value of an order last month. The default average function might just calculate the average ",(0,i.kt)("inlineCode",{parentName:"p"},"Value")," of all ",(0,i.kt)("inlineCode",{parentName:"p"},"Orders"),". This, again, would be false. We therefore replace the default ",(0,i.kt)("inlineCode",{parentName:"p"},"average(orders.Value)")," with ",(0,i.kt)("inlineCode",{parentName:"p"},"sum(orders.Value) / count(orders)"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'rule Adapt_Average {\n    rule_pattern: \n     """\n        var orders: kb.Orders\n        @replace {\n            average(orders.Value)\n        } with {\n            sum(orders.Value) / count(orders)\n        }\n        """\n}\n')),(0,i.kt)("p",null,"Note that this rule uses ",(0,i.kt)("inlineCode",{parentName:"p"},"count(orders)"),". So, when asking ",(0,i.kt)("em",{parentName:"p"},"Average value of an order last month?"),"  Veezoo would first replace ",(0,i.kt)("inlineCode",{parentName:"p"},"average(orders.Value)")," with ",(0,i.kt)("inlineCode",{parentName:"p"},"sum(orders.Value) / count(orders)"),", and then in a second step this with ",(0,i.kt)("inlineCode",{parentName:"p"},"sum(orders.Value) / sum(orders.Order_Qty)"),". If we would only ever be interested in the average, we could of course only have one rule do both. "),(0,i.kt)("h3",{id:"for_user_role-optional"},"for_user_role (optional)"),(0,i.kt)("p",null,"If there are user roles defined, you can use this tag to specify to whom the rule should apply. This can be useful, for example, if different roles have differing definitions of KPIs. For a more detailed explanation, see ",(0,i.kt)("a",{parentName:"p",href:"/docs/authorization/column-level-permission/#granting-column-level-permissions-with-for_user_role"},"here"),"."),(0,i.kt)("h3",{id:"rule_tag-optional"},"rule_tag (optional)"),(0,i.kt)("p",null,"This tag specifies when the rule is applied. There are two options:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"use ",(0,i.kt)("inlineCode",{parentName:"li"},"meta.SemanticLogicTag")," if the rule should be applied in the ",(0,i.kt)("em",{parentName:"li"},"Semantic Rewriting")," stage"),(0,i.kt)("li",{parentName:"ul"},"use ",(0,i.kt)("inlineCode",{parentName:"li"},"meta.LogicRewritingTag")," if the rule should be applied in the ",(0,i.kt)("em",{parentName:"li"},"Logic Rewriting")," stage")),(0,i.kt)("h4",{id:"semantic-rewriting-stage"},"Semantic Rewriting stage"),(0,i.kt)("p",null,"This Rewriting stage is concerned with rewriting rules that need to be communicated to the user for clarity when answering."),(0,i.kt)("p",null,'Classical examples are default values, e.g. "how many customers" means "how many active customers" by default and the user should be made aware of that, in case that\'s not what he/she wants.'),(0,i.kt)("h4",{id:"logic-rewriting-stage"},"Logic Rewriting stage"),(0,i.kt)("p",null,"In contrast to Semantic Rewriting, rules in Logic Rewriting are rather technical and have no meaning for the end user."),(0,i.kt)("p",null,"A common case is when the database does not have the sought concept raw stored, but it should be computed from other concepts. We call these higher-order concepts."),(0,i.kt)("p",null,"These are usually KPI definitions (",(0,i.kt)("inlineCode",{parentName:"p"},"measure"),"), e.g. to compute the profit we need to add ",(0,i.kt)("em",{parentName:"p"},"revenue x")," with ",(0,i.kt)("em",{parentName:"p"},"revenue y")," and subtract ",(0,i.kt)("em",{parentName:"p"},"costs z"),", but not ",(0,i.kt)("em",{parentName:"p"},"costs w"),"."),(0,i.kt)("p",null,"The main difference for users will be if the rule affects the title of answers or not. If no ",(0,i.kt)("inlineCode",{parentName:"p"},"rule_tag")," is specified, ",(0,i.kt)("inlineCode",{parentName:"p"},"meta.SemanticLogicTag")," will be used by default."),(0,i.kt)("h3",{id:"comment-optional"},"comment (optional)"),(0,i.kt)("p",null,"You can add descriptions to your rules to explain what it does. Comments have to use the ",(0,i.kt)("inlineCode",{parentName:"p"},"comment")," tag to be saved. ",(0,i.kt)("inlineCode",{parentName:"p"},"// comments using slashes")," will not cause any errors when compiling, but will be lost upon reloading the page."))}h.isMDXComponent=!0}}]);