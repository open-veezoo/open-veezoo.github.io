"use strict";(self.webpackChunkveezoo_docs=self.webpackChunkveezoo_docs||[]).push([[696],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return y}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var u=r.createContext({}),c=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},d=function(e){var t=c(e.components);return r.createElement(u.Provider,{value:t},e.children)},l="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,u=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),l=c(n),f=o,y=l["".concat(u,".").concat(f)]||l[f]||p[f]||a;return n?r.createElement(y,s(s({ref:t},d),{},{components:n})):r.createElement(y,s({ref:t},d))}));function y(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,s=new Array(a);s[0]=f;var i={};for(var u in t)hasOwnProperty.call(t,u)&&(i[u]=t[u]);i.originalType=e,i[l]="string"==typeof e?e:o,s[1]=i;for(var c=2;c<a;c++)s[c]=n[c];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},8277:function(e,t,n){n.r(t),n.d(t,{assets:function(){return d},contentTitle:function(){return u},default:function(){return y},frontMatter:function(){return i},metadata:function(){return c},toc:function(){return l}});var r=n(7462),o=n(3366),a=(n(7294),n(3905)),s=["components"],i={id:"understand-questions",title:"Get Veezoo to Understand Your Questions",sidebar_label:"Get Veezoo to Understand Your Questions",slug:"/recipes/understand-questions"},u=void 0,c={unversionedId:"recipes/understand-questions",id:"recipes/understand-questions",title:"Get Veezoo to Understand Your Questions",description:"synonym: I want to say 'NYC', instead of 'New York City'",source:"@site/docs/recipes/understand-questions.md",sourceDirName:"recipes",slug:"/recipes/understand-questions",permalink:"/docs/recipes/understand-questions",draft:!1,editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/recipes/understand-questions.md",tags:[],version:"current",frontMatter:{id:"understand-questions",title:"Get Veezoo to Understand Your Questions",sidebar_label:"Get Veezoo to Understand Your Questions",slug:"/recipes/understand-questions"},sidebar:"docs",previous:{title:"Working with historized tables",permalink:"/docs/tutorials/historized-tables"},next:{title:"Help Business Users Understand Your Data",permalink:"/docs/recipes/understand-data"}},d={},l=[],p={toc:l},f="wrapper";function y(e){var t=e.components,n=(0,o.Z)(e,s);return(0,a.kt)(f,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"/docs/reference/kb-layer/general/synonym"},"synonym"),": I want to say 'NYC', instead of 'New York City'"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"/docs/reference/kb-layer/class/default_date"},"default_date"),": If I say 2018, I mean Order Date in 2018"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"/docs/reference/kb-layer/class/default_order"},"default_order"),": If I say 'top 10 orders', I mean 'top 10 orders by profit'"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"/docs/reference/ontology/person"},"onto.Person"),": I want to say 'who' and see 'customers'"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"/docs/reference/ontology/location"},"onto.Location"),": I want to say 'where' and see 'countries'"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"/docs/reference/ontology/location"},"onto.Birthdate"),": I want to ask about 'birthdays next week' based on a Birthdate column"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"/docs/reference/kb-layer/class/creation_date"},"creation_date"),": I want to ask about the age of something based on a date"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"."},"default_aggregation"),": When I say 'temperature per year', I want the average temperature per year, not the sum"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"."},"KB_Union"),": I want to say Nordic Countries and see only Norway, Sweden, etc."),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"."},"KB_LowLinkingPriority"),": I want Veezoo to always prefer the state of New York instead of the city of New York when I say 'New York'"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"/docs/reference/kb-layer/attribute/quantity_of"},"quantity_of"),': I want Veezoo to understand "number of products" as the sum of a quantity column'))}y.isMDXComponent=!0}}]);