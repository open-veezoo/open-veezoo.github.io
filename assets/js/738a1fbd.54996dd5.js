"use strict";(self.webpackChunkveezoo_docs=self.webpackChunkveezoo_docs||[]).push([[4060],{3905:function(e,n,t){t.d(n,{Zo:function(){return c},kt:function(){return d}});var a=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=a.createContext({}),u=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},c=function(e){var n=u(e.components);return a.createElement(s.Provider,{value:n},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},h=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),p=u(t),h=i,d=p["".concat(s,".").concat(h)]||p[h]||m[h]||r;return t?a.createElement(d,l(l({ref:n},c),{},{components:t})):a.createElement(d,l({ref:n},c))}));function d(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var r=t.length,l=new Array(r);l[0]=h;var o={};for(var s in n)hasOwnProperty.call(n,s)&&(o[s]=n[s]);o.originalType=e,o[p]="string"==typeof e?e:i,l[1]=o;for(var u=2;u<r;u++)l[u]=t[u];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}h.displayName="MDXCreateElement"},5662:function(e,n,t){t.r(n),t.d(n,{assets:function(){return c},contentTitle:function(){return s},default:function(){return d},frontMatter:function(){return o},metadata:function(){return u},toc:function(){return p}});var a=t(7462),i=t(3366),r=(t(7294),t(3905)),l=["components"],o={id:"function",title:"function",sidebar_label:"What is a function?"},s=void 0,u={unversionedId:"reference/kb-layer/function/function",id:"reference/kb-layer/function/function",title:"function",description:"Definition",source:"@site/docs/reference/kb-layer/function/function.md",sourceDirName:"reference/kb-layer/function",slug:"/reference/kb-layer/function/",permalink:"/docs/reference/kb-layer/function/",draft:!1,tags:[],version:"current",frontMatter:{id:"function",title:"function",sidebar_label:"What is a function?"},sidebar:"reference",previous:{title:"measure",permalink:"/docs/reference/kb-layer/measure/"},next:{title:"\u2699\ufe0f arguments",permalink:"/docs/reference/kb-layer/function/arguments"}},c={},p=[{value:"Definition",id:"definition",level:2},{value:"Usage",id:"usage",level:2},{value:"Examples",id:"examples",level:2},{value:"CB_Many2One: Correlation",id:"cb_many2one-correlation",level:3},{value:"CB_One2One: Length",id:"cb_one2one-length",level:3},{value:"CB_One2Maybe: Leap Year",id:"cb_one2maybe-leap-year",level:3},{value:"CB_One2Maybe with single_value_only: Regex match",id:"cb_one2maybe-with-single_value_only-regex-match",level:3}],m={toc:p},h="wrapper";function d(e){var n=e.components,t=(0,i.Z)(e,l);return(0,r.kt)(h,(0,a.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"definition"},"Definition"),(0,r.kt)("p",null,"A ",(0,r.kt)("inlineCode",{parentName:"p"},"function")," in Veezoo allows users to create custom SQL functions or transformations that may not be readily available in Veezoo off-the-shelf. It's a useful feature for adding specialized functionality that is available in your database, e.g. linear regression functions."),(0,r.kt)("h2",{id:"usage"},"Usage"),(0,r.kt)("p",null,"A ",(0,r.kt)("inlineCode",{parentName:"p"},"function")," is defined with several properties:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"name"),": A name for the function, used when calling it."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"synonym"),": Alternative ways to refer to this function in a question."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"dynamic_display_name"),": The name of the function as it will be displayed in Veezoo, including placeholders for the arguments."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"dynamic_autocomplete"),": (Optional) The pattern that should be displayed in the autocomplete, when a user is typing a question."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"tag"),": The type of function. Can be one of the following:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"CB_Many2One")," for aggregation functions. These functions take multiple values and return a single value, like ",(0,r.kt)("inlineCode",{parentName:"li"},"sum")," or ",(0,r.kt)("inlineCode",{parentName:"li"},"average"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"CB_One2One")," for transformation functions. These functions transform one value into another, like converting temperatures or changing data types."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"CB_One2Maybe")," for filter functions. These functions return true or false."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"arguments"),": The types of arguments the function accepts."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"return"),": The return type of the function. Left out for ",(0,r.kt)("inlineCode",{parentName:"li"},"CB_One2Maybe"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"sql_select"),": The SQL equivalent of the function for the SELECT clause. It uses placeholders (",(0,r.kt)("inlineCode",{parentName:"li"},"$1"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"$2"),", etc.) for the arguments."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"sql_where"),": Especially for ",(0,r.kt)("inlineCode",{parentName:"li"},"CB_One2Maybe"),", the SQL equivalent of the function for the WHERE clause. It uses placeholders (",(0,r.kt)("inlineCode",{parentName:"li"},"$1"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"$2"),", etc.) for the arguments.")),(0,r.kt)("h2",{id:"examples"},"Examples"),(0,r.kt)("h3",{id:"cb_many2one-correlation"},"CB_Many2One: Correlation"),(0,r.kt)("p",null,"Let's consider a real-world example where we define a function to calculate the ",(0,r.kt)("inlineCode",{parentName:"p"},"Correlation")," between two number series:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'function Correlation {\n   name: "Correlation"\n   \n   // That\'s what gets displayed to the end user\n   dynamic_display_name: "Correlation of $1 and $2"\n   \n   // It is an aggregation\n   tag: CB_Many2One\n\n   // It takes 2 series of numbers\n   arguments: [\n       number,\n       number\n   ]\n\n   // It returns another number\n   return: number\n\n   sql_select: "CORR($1, $2)"\n}\n')),(0,r.kt)("p",null,"In this example:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The ",(0,r.kt)("inlineCode",{parentName:"li"},"name"),' of the function is "Correlation".'),(0,r.kt)("li",{parentName:"ul"},"The ",(0,r.kt)("inlineCode",{parentName:"li"},"dynamic_display_name"),' is "Correlation of $1 and $2", where ',(0,r.kt)("inlineCode",{parentName:"li"},"$1")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"$2")," are placeholders that will be replaced with the actual arguments when the function is called."),(0,r.kt)("li",{parentName:"ul"},"The ",(0,r.kt)("inlineCode",{parentName:"li"},"tag")," indicates this is an aggregation function (",(0,r.kt)("inlineCode",{parentName:"li"},"CB_Many2One"),"), meaning it takes multiple values (in this case, two series of numbers) and returns a single value (the correlation coefficient)."),(0,r.kt)("li",{parentName:"ul"},"The ",(0,r.kt)("inlineCode",{parentName:"li"},"arguments")," indicate that this function expects two arguments, both of which should be numbers."),(0,r.kt)("li",{parentName:"ul"},"The ",(0,r.kt)("inlineCode",{parentName:"li"},"return")," type is ",(0,r.kt)("inlineCode",{parentName:"li"},"number"),", meaning the function will return a numeric value."),(0,r.kt)("li",{parentName:"ul"},"The ",(0,r.kt)("inlineCode",{parentName:"li"},"sql_select")," contains the actual SQL code that will be executed when the function is called, with placeholders for the arguments. In this case, it's a call to the ",(0,r.kt)("inlineCode",{parentName:"li"},"CORR")," function in SQL, which calculates the correlation coefficient between two series of numbers.")),(0,r.kt)("p",null,"One caveat here is that the arguments will only be ",(0,r.kt)("inlineCode",{parentName:"p"},"number")," and therefore not ",(0,r.kt)("inlineCode",{parentName:"p"},"integer"),". To account for this, you have to adapt it like:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    arguments: [\n       {  type: [ number, integer ]  },\n       {  type: [ number, integer ]  }\n   ]\n")),(0,r.kt)("p",null,"This means that each argument accepts multiple types."),(0,r.kt)("h3",{id:"cb_one2one-length"},"CB_One2One: Length"),(0,r.kt)("p",null,"Let's say we want to implement a function that outputs the length of a string attribute."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'function Length {\n    name: "Length"\n\n    synonym: "long"\n\n    // The name with the argument.\n    dynamic_display_name: "Length of $1"\n\n    // In this case we map each string value to an integer\n    // Therefore we use CB_One2One\n    tag: CB_One2One\n\n    arguments: [ string ]\n\n    return: integer\n\n    sql_select: "LENGTH($1)"\n}\n')),(0,r.kt)("p",null,'Now you can ask for instance "What is the average length of an email?", if you have an ',(0,r.kt)("inlineCode",{parentName:"p"},"string Email")," in your Knowledge Graph."),(0,r.kt)("h3",{id:"cb_one2maybe-leap-year"},"CB_One2Maybe: Leap Year"),(0,r.kt)("p",null,"In PostgreSQL, we can extract the year from a date using ",(0,r.kt)("inlineCode",{parentName:"p"},"EXTRACT(YEAR FROM $1)")," and then find out if a year is a Leap Year by\ndoing ",(0,r.kt)("inlineCode",{parentName:"p"},"(EXTRACT(DOY FROM DATE (EXTRACT(YEAR FROM $1)::text || '-12-31')) = 366)"),"."),(0,r.kt)("p",null,"Using this, we can define a general ",(0,r.kt)("inlineCode",{parentName:"p"},"function")," in Veezoo that takes an arbitrary date attribute and filters for only dates in a leap year."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'function Leap_Year {\n   name: "Leap Year"\n\n   // The name with the argument.\n   dynamic_display_name: "$1 is in leap year"\n\n   // To display this function in autocomplete\n   dynamic_autocomplete: "$1 in leap year"\n\n   tag: CB_One2Maybe\n\n    arguments: [\n       date\n    ]\n\n    sql_where: "(EXTRACT(DOY FROM DATE (EXTRACT(YEAR FROM $1)::text || \'-12-31\')) = 366)"\n}\n')),(0,r.kt)("p",null,"Note here that we used ",(0,r.kt)("inlineCode",{parentName:"p"},"sql_where")," instead of ",(0,r.kt)("inlineCode",{parentName:"p"},"sql_select"),", because it's a ",(0,r.kt)("inlineCode",{parentName:"p"},"CB_One2Maybe"),". Another difference is that we don't have a ",(0,r.kt)("inlineCode",{parentName:"p"},"return"),"."),(0,r.kt)("p",null,"Finally, we need to explicitly add ",(0,r.kt)("inlineCode",{parentName:"p"},"dynamic_autocomplete"),", so it appears in the AutoComplete when typing a question. For instance, when you type something like 'How many customers with birthdate in', you will see 'birthdate in leap year' as a suggestion."),(0,r.kt)("h3",{id:"cb_one2maybe-with-single_value_only-regex-match"},"CB_One2Maybe with single_value_only: Regex match"),(0,r.kt)("p",null,"There are cases where you want to specify that one of the arguments is not a column, but rather a literal value. For that, we will use ",(0,r.kt)("inlineCode",{parentName:"p"},"single_value_only: true"),"."),(0,r.kt)("p",null,"As an example, let's look into the POSIX Regular Expressions operator '~' in PostgreSQL."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'function matches_regex {\n   name: "matches regex"\n   synonym: [\n      "matches",\n      "regex"\n   ] \n   \n   dynamic_display_name: "$1 matches regex $2"\n   dynamic_autocomplete: "$1 matches regex $2"\n   \n   tag: CB_One2Maybe\n   \n   arguments: [ \n      { type: [string, class] },\n      { type: string, single_value_only: true}\n   ]\n   \n   sql_where: "$1 ~ $2"\n}\n')),(0,r.kt)("p",null,"This allows you to ask questions like: \"Show me all customer with an email that matches '.","*","?@gmail.com'\""),(0,r.kt)("p",null,"Another thing to notice here is that the first argument can take either a ",(0,r.kt)("inlineCode",{parentName:"p"},"string")," or a ",(0,r.kt)("inlineCode",{parentName:"p"},"class"),". In the case of the ",(0,r.kt)("inlineCode",{parentName:"p"},"class"),", the resulting SQL uses only the ",(0,r.kt)("inlineCode",{parentName:"p"},"sql")," in the class definition, not ",(0,r.kt)("inlineCode",{parentName:"p"},"name_sql"),", nor any renamings on entities that you may have done in the Knowledge Graph."))}d.isMDXComponent=!0}}]);