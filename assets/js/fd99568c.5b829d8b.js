"use strict";(self.webpackChunkveezoo_docs=self.webpackChunkveezoo_docs||[]).push([[5569],{3905:function(e,n,r){r.d(n,{Zo:function(){return c},kt:function(){return b}});var t=r(7294);function a(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function o(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function i(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?o(Object(r),!0).forEach((function(n){a(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function l(e,n){if(null==e)return{};var r,t,a=function(e,n){if(null==e)return{};var r,t,a={},o=Object.keys(e);for(t=0;t<o.length;t++)r=o[t],n.indexOf(r)>=0||(a[r]=e[r]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)r=o[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var u=t.createContext({}),s=function(e){var n=t.useContext(u),r=n;return e&&(r="function"==typeof e?e(n):i(i({},n),e)),r},c=function(e){var n=s(e.components);return t.createElement(u.Provider,{value:n},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},m=t.forwardRef((function(e,n){var r=e.components,a=e.mdxType,o=e.originalType,u=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=s(r),m=a,b=p["".concat(u,".").concat(m)]||p[m]||d[m]||o;return r?t.createElement(b,i(i({ref:n},c),{},{components:r})):t.createElement(b,i({ref:n},c))}));function b(e,n){var r=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=m;var l={};for(var u in n)hasOwnProperty.call(n,u)&&(l[u]=n[u]);l.originalType=e,l[p]="string"==typeof e?e:a,i[1]=l;for(var s=2;s<o;s++)i[s]=r[s];return t.createElement.apply(null,i)}return t.createElement.apply(null,r)}m.displayName="MDXCreateElement"},9411:function(e,n,r){r.r(n),r.d(n,{assets:function(){return c},contentTitle:function(){return u},default:function(){return b},frontMatter:function(){return l},metadata:function(){return s},toc:function(){return p}});var t=r(7462),a=r(3366),o=(r(7294),r(3905)),i=["components"],l={id:"number",title:"number"},u=void 0,s={unversionedId:"reference/kb-layer/attribute/number",id:"reference/kb-layer/attribute/number",title:"number",description:"Definition",source:"@site/docs/reference/kb-layer/attribute/number.md",sourceDirName:"reference/kb-layer/attribute",slug:"/reference/kb-layer/attribute/number",permalink:"/docs/reference/kb-layer/attribute/number",draft:!1,tags:[],version:"current",frontMatter:{id:"number",title:"number"},sidebar:"reference",previous:{title:"date",permalink:"/docs/reference/kb-layer/attribute/date"},next:{title:"boolean",permalink:"/docs/reference/kb-layer/attribute/boolean"}},c={},p=[{value:"Definition",id:"definition",level:2},{value:"Usage",id:"usage",level:2},{value:"Integer",id:"integer",level:3}],d={toc:p},m="wrapper";function b(e){var n=e.components,r=(0,a.Z)(e,i);return(0,o.kt)(m,(0,t.Z)({},d,r,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"definition"},"Definition"),(0,o.kt)("p",null,"A numeric attribute is used whenever you have a column or SQL expression that returns a number, e.g. an integer or a decimal number."),(0,o.kt)("h2",{id:"usage"},"Usage"),(0,o.kt)("p",null,"File: ",(0,o.kt)("em",{parentName:"p"},"hitchhiker/knowledge-base/classes/Order.vkl")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'import: [\n    db.postgres.movie_db.public.ORDERS\n]\n\nkb {\n\n    class Order {\n\n        ...\n\n        number Order_Total {\n            name.en: "Order Total"\n            synonym.en: ["Price", "Revenue", "Amount"]\n\n            unit: onto.Currency.USD\n\n            sql: "${ORDERS.order_total}"\n        }    \n    }\n}\n')),(0,o.kt)("p",null,"Notice the ",(0,o.kt)("a",{parentName:"p",href:"."},"unit")," parameter, which allows Veezoo to display the value in the appropriate format to the user."),(0,o.kt)("p",null,"As with the other kinds of attributes, you can also apply any kind of compatible SQL transformation inside ",(0,o.kt)("inlineCode",{parentName:"p"},"sql"),"."),(0,o.kt)("p",null,"Let's say instead that your attribute ",(0,o.kt)("inlineCode",{parentName:"p"},"kb.Order.Order_Total")," contains values in different currencies (USD, CHF, EUR), specified in the column ",(0,o.kt)("inlineCode",{parentName:"p"},"ORDERS.currency")," (imported as class ",(0,o.kt)("inlineCode",{parentName:"p"},"kb.Order.Currency"),").\nNow, summing these values up wouldn't make any sense. So we define a new attribute ",(0,o.kt)("inlineCode",{parentName:"p"},"Order_Total_EUR"),", which converts the values according to a fixed exchange rate."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'import: [\n    db.postgres.movie_db.public.ORDERS\n]\n\nkb {\n\n    class Order {\n\n        ...\n\n        number Order_Total_EUR {\n            name.en: "Order Total (EUR)"\n            synonym.en: ["Price", "Revenue", "Order Total"]\n\n            unit: onto.Currency.EUR\n\n            sql: """\n                CASE ${kb.Order.Currency}\n                   WHEN \'USD\' THEN ${kb.Order.Order_Total} * 0.83\n                   WHEN \'CHF\' THEN ${kb.Order.Order_Total} * 0.92\n                   ELSE ${kb.Order.Order_Total}\n                END   \n            """\n\n        }    \n    }\n}\n')),(0,o.kt)("p",null,"Notice here that we have referred inside the curly brackets ",(0,o.kt)("inlineCode",{parentName:"p"},"${...}")," to a ",(0,o.kt)("inlineCode",{parentName:"p"},"kb")," concept, instead of a ",(0,o.kt)("inlineCode",{parentName:"p"},"db")," concept. This allows us to use recursively the definitions in the ",(0,o.kt)("inlineCode",{parentName:"p"},"sql")," from these ",(0,o.kt)("inlineCode",{parentName:"p"},"kb")," concepts. "),(0,o.kt)("p",null,"For example, we could now build on top of ",(0,o.kt)("inlineCode",{parentName:"p"},"kb.Order.Order_Total_EUR")," like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'import: [\n    db.postgres.movie_db.public.ORDERS\n]\n\nkb {\n\n    class Order {\n\n        ...\n\n        boolean Awesome {\n            name.en: "Awesome"\n\n            sql: "${kb.Order.Order_Total_EUR} > 1000"\n\n        }    \n    }\n}\n')),(0,o.kt)("p",null,"This is a ",(0,o.kt)("a",{parentName:"p",href:"/docs/reference/kb-layer/attribute/boolean"},"boolean"),', defining "awesome" orders as those with a total order value normalized in Euro above 1000. How awesome is that!'),(0,o.kt)("h3",{id:"integer"},"Integer"),(0,o.kt)("p",null,"You can also be more precise on the type of number and define it as an ",(0,o.kt)("inlineCode",{parentName:"p"},"integer"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'import: [\n    db.postgres.movie_db.public.ORDERS\n]\n\nkb {\n\n    class Order {\n\n        ...\n\n        integer Quantity {\n            name.en: "Quantity"\n            synonym.en: ["Qty"]\n\n            sql: "${ORDERS.quantity}"\n        }    \n    }\n}\n')),(0,o.kt)("p",null,'This will help Veezoo format the results more appropriately and allows you to ask questions such as "how many orders were there for each quantity", which Veezoo does not answer if it is for a fractional number.'))}b.isMDXComponent=!0}}]);