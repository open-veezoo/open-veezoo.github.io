"use strict";(self.webpackChunkveezoo_docs=self.webpackChunkveezoo_docs||[]).push([[9052],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return m}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=c(n),h=r,m=p["".concat(s,".").concat(h)]||p[h]||d[h]||o;return n?a.createElement(m,i(i({ref:t},u),{},{components:n})):a.createElement(m,i({ref:t},u))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=h;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[p]="string"==typeof e?e:r,i[1]=l;for(var c=2;c<o;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},5415:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return s},default:function(){return m},frontMatter:function(){return l},metadata:function(){return c},toc:function(){return p}});var a=n(7462),r=n(3366),o=(n(7294),n(3905)),i=["components"],l={id:"custom_chart",title:"Custom Charts"},s=void 0,c={unversionedId:"reference/charts/custom_chart",id:"reference/charts/custom_chart",title:"Custom Charts",description:"Definition",source:"@site/docs/reference/charts/custom_chart.md",sourceDirName:"reference/charts",slug:"/reference/charts/custom_chart",permalink:"/docs/reference/charts/custom_chart",draft:!1,tags:[],version:"current",frontMatter:{id:"custom_chart",title:"Custom Charts"},sidebar:"reference",previous:{title:"Agents",permalink:"/docs/reference/agents/"},next:{title:"Ground Truths",permalink:"/docs/reference/ground-truths/"}},u={},p=[{value:"Definition",id:"definition",level:2},{value:"Example",id:"example",level:2},{value:"Properties",id:"properties",level:2},{value:"<code>name</code>",id:"name",level:3},{value:"<code>show_for_class</code>",id:"show_for_class",level:3},{value:"<code>geojson_join_by</code>",id:"geojson_join_by",level:3},{value:"<code>geojson</code>",id:"geojson",level:3},{value:"<code>match_pattern</code> (Optional)",id:"match_pattern-optional",level:3},{value:"Usage",id:"usage",level:2},{value:"Example Use Case",id:"example-use-case",level:3},{value:"Considerations",id:"considerations",level:2}],d={toc:p},h="wrapper";function m(e){var t=e.components,n=(0,r.Z)(e,i);return(0,o.kt)(h,(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"definition"},"Definition"),(0,o.kt)("p",null,"In Veezoo, you can define custom maps using the ",(0,o.kt)("inlineCode",{parentName:"p"},"custom_chart")," configuration. This allows you to create visualizations that extend beyond the default chart types provided by Veezoo. One such example is a custom map visualization using GeoJSON data."),(0,o.kt)("p",null,"We plan to extend ",(0,o.kt)("inlineCode",{parentName:"p"},"custom_chart")," to other charts in the future that are not maps."),(0,o.kt)("h2",{id:"example"},"Example"),(0,o.kt)("p",null,"Here is a realistic example of how to define a custom chart for visualizing sales performance by region:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'custom_chart Region_Map {\n    name: "Region Map"\n\n    show_for_class: kb.Region\n\n    // needs to match the entities of the class with the values for the given property\n    // in this example "US-NY" needs to be an entity of kb.Region in the KG as well\n    geojson_join_by: "region_code"\n    \n    geojson: """\n        {\n            "type": "FeatureCollection",\n            "features": [\n                {\n                    "type": "Feature",\n                    "properties": {\n                        "region_code": "US-NY"\n                    },\n                    "geometry": {\n                        "type": "Polygon",\n                        "coordinates": [[[...]]]\n                    }\n                }\n            ]\n        }\n    """\n}\n')),(0,o.kt)("h2",{id:"properties"},"Properties"),(0,o.kt)("h3",{id:"name"},(0,o.kt)("inlineCode",{parentName:"h3"},"name")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"The name of the custom chart that will be displayed in the UI."),(0,o.kt)("li",{parentName:"ul"},"Example: ",(0,o.kt)("inlineCode",{parentName:"li"},'"My Custom Map"'))),(0,o.kt)("h3",{id:"show_for_class"},(0,o.kt)("inlineCode",{parentName:"h3"},"show_for_class")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Specifies the class for which the custom chart should be displayed."),(0,o.kt)("li",{parentName:"ul"},"This ensures that the chart is only available when querying data related to the specified class."),(0,o.kt)("li",{parentName:"ul"},"Example: ",(0,o.kt)("inlineCode",{parentName:"li"},"kb.Region"))),(0,o.kt)("h3",{id:"geojson_join_by"},(0,o.kt)("inlineCode",{parentName:"h3"},"geojson_join_by")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Defines the key in the GeoJSON data that corresponds to values in the ",(0,o.kt)("inlineCode",{parentName:"li"},"show_for_class")," class."),(0,o.kt)("li",{parentName:"ul"},"This allows the system to match entities in your dataset to regions in the GeoJSON data."),(0,o.kt)("li",{parentName:"ul"},"Example: ",(0,o.kt)("inlineCode",{parentName:"li"},'"region_code"'))),(0,o.kt)("h3",{id:"geojson"},(0,o.kt)("inlineCode",{parentName:"h3"},"geojson")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Contains the GeoJSON data that defines the shapes and regions for the custom map."),(0,o.kt)("li",{parentName:"ul"},"The GeoJSON format should be properly structured to include features with corresponding properties that align with the ",(0,o.kt)("inlineCode",{parentName:"li"},"geojson_join_by")," key."),(0,o.kt)("li",{parentName:"ul"},"Example:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'geojson: """\n{\n    "type": "FeatureCollection",\n    "features": [\n        {\n            "type": "Feature",\n            "properties": {\n                "region_code": "123"\n            },\n            "geometry": {\n                "type": "Polygon",\n                "coordinates": [[[...]]]\n            }\n        }\n    ]\n}\n"""\n')),(0,o.kt)("h3",{id:"match_pattern-optional"},(0,o.kt)("inlineCode",{parentName:"h3"},"match_pattern")," (Optional)"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"The ",(0,o.kt)("inlineCode",{parentName:"li"},"match_pattern")," specifies the VQL pattern that needs to be matched for the custom chart to be considered."),(0,o.kt)("li",{parentName:"ul"},"This is useful when you want to display a custom chart only when certain conditions are met."),(0,o.kt)("li",{parentName:"ul"},"Example:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'custom_chart Map_of_Rio_de_Janeiro {\n    ... // other attributes of custom_chart\n\n    // only show this for answers involving cities\n    show_for_class: kb.City\n\n    // make sure that we have a filter for Rio de Janeiro\n    match_pattern: """\n        var order: kb.Orders\n        order.located_in = kb.State.Rio_de_Janeiro\n    """\n}\n')),(0,o.kt)("h2",{id:"usage"},"Usage"),(0,o.kt)("p",null,"Once defined, the custom chart will be available when querying the specified ",(0,o.kt)("inlineCode",{parentName:"p"},"show_for_class")," in Veezoo. Users can visualize data mapped to the geographic regions defined in the ",(0,o.kt)("inlineCode",{parentName:"p"},"geojson")," property."),(0,o.kt)("h3",{id:"example-use-case"},"Example Use Case"),(0,o.kt)("p",null,"If you have sales data categorized by region, you can define a custom map that highlights regions with different colors based on sales performance. By setting ",(0,o.kt)("inlineCode",{parentName:"p"},"geojson_join_by")," to the appropriate region identifier, the map will dynamically adjust based on the queried data."),(0,o.kt)("p",null,"Additionally, you can use ",(0,o.kt)("inlineCode",{parentName:"p"},"match_pattern")," to ensure that the chart is only displayed when specific filters are applied, making the visualization context-aware."),(0,o.kt)("h2",{id:"considerations"},"Considerations"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Ensure that the GeoJSON data is correctly formatted to prevent rendering issues."),(0,o.kt)("li",{parentName:"ul"},"The ",(0,o.kt)("inlineCode",{parentName:"li"},"geojson_join_by")," key must match exactly with values in your dataset."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"match_pattern")," should be carefully crafted to align with the intended VQL logic."),(0,o.kt)("li",{parentName:"ul"},"Custom charts provide a way to enhance visualization options within Veezoo while maintaining a seamless user experience.")))}m.isMDXComponent=!0}}]);