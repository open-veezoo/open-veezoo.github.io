"use strict";(self.webpackChunkveezoo_docs=self.webpackChunkveezoo_docs||[]).push([[2783],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return b}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},d="mdxType",f={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=c(n),p=a,b=d["".concat(l,".").concat(p)]||d[p]||f[p]||o;return n?r.createElement(b,i(i({ref:t},u),{},{components:n})):r.createElement(b,i({ref:t},u))}));function b(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=p;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[d]="string"==typeof e?e:a,i[1]=s;for(var c=2;c<o;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},9072:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return l},default:function(){return b},frontMatter:function(){return s},metadata:function(){return c},toc:function(){return d}});var r=n(7462),a=n(3366),o=(n(7294),n(3905)),i=["components"],s={id:"id",title:"onto.ID",sidebar_label:"onto.ID",slug:"/reference/kb-layer/attribute/extends/id"},l=void 0,c={unversionedId:"reference/kb-layer/attribute/extends/id",id:"reference/kb-layer/attribute/extends/id",title:"onto.ID",description:"Definition",source:"@site/docs/reference/kb-layer/attribute/extends/id.md",sourceDirName:"reference/kb-layer/attribute/extends",slug:"/reference/kb-layer/attribute/extends/id",permalink:"/docs/reference/kb-layer/attribute/extends/id",draft:!1,editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/reference/kb-layer/attribute/extends/id.md",tags:[],version:"current",frontMatter:{id:"id",title:"onto.ID",sidebar_label:"onto.ID",slug:"/reference/kb-layer/attribute/extends/id"},sidebar:"docs",previous:{title:"is_snapshot_date",permalink:"/docs/reference/kb-layer/attribute/is_snapshot_date"},next:{title:"onto.CalendarTable",permalink:"/docs/reference/kb-layer/attribute/extends/calendar-table"}},u={},d=[{value:"Definition",id:"definition",level:2},{value:"Usage",id:"usage",level:2}],f={toc:d},p="wrapper";function b(e){var t=e.components,n=(0,a.Z)(e,i);return(0,o.kt)(p,(0,r.Z)({},f,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"definition"},"Definition"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"onto.ID")," is used on attributes that model IDs that users might know and ask about, for example an ID assigned to each employee of the company.\nOther examples are a policy number of policies of an insurance, or an internal database ID that might be interesting to more technical users."),(0,o.kt)("h2",{id:"usage"},"Usage"),(0,o.kt)("p",null,"An attribute is marked as ID by setting ",(0,o.kt)("inlineCode",{parentName:"p"},"extends: onto.ID"),', which tells Veezoo to enable some special behavior.\nIn particular, this will make Veezoo understand questions like "Customers of Employee E1234-5678" as "Customers of Employee with ID = \'E1234-5678\'" if there isn\'t already an entity for "E1234-5678".\nSupporting this kind of questions is especially useful for big classes, where it is difficult to synchronize all IDs as entities.'),(0,o.kt)("p",null,"File: ",(0,o.kt)("em",{parentName:"p"},"hitchhiker/knowledge-base/classes/Order.vkl")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'import: [\n    db.postgres.movie_db.public.ORDERS\n]\n\nkb {\n\n    class Order {\n        from_table: ORDERS\n        sql: "${ORDERS.ID}"\n\n        /* ... */\n\n        // ID attributes work best as strings, but can also be classes (see below)\n        string ID {\n            name.en: "Order ID"\n            synonym.en: "ID"\n\n            // Tells Veezoo that an ID is unique to an order,\n            //  i.e. different orders will have different IDs\n            tag: KB_One2One\n\n            // Often the same as the sql of the class (see class Order),\n            //  but can be different if the internal DB ID is not the one users know about\n            sql: "${ORDERS.ID}"\n\n            // Marks this attribute as an ID, enabling special behavior\n            extends: onto.ID\n        }\n    }\n}\n')),(0,o.kt)("p",null,"IDs are usually attributes of type 'string', but can also be of type 'class', which will help users with autocomplete and can help Veezoo avoid detecting IDs where it shouldn't.\nHowever, the ID entities can easily become out of date if not synchronized frequently, and there can be performance issues if there are too many of them, so IDs should only be classes if there aren't too many and they rarely change."))}b.isMDXComponent=!0}}]);