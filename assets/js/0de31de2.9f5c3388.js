"use strict";(self.webpackChunkveezoo_docs=self.webpackChunkveezoo_docs||[]).push([[9480],{3905:function(e,t,r){r.d(t,{Zo:function(){return s},kt:function(){return m}});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var u=n.createContext({}),c=function(e){var t=n.useContext(u),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},s=function(e){var t=c(e.components);return n.createElement(u.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},b=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,u=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),d=c(r),b=a,m=d["".concat(u,".").concat(b)]||d[b]||p[b]||o;return r?n.createElement(m,i(i({ref:t},s),{},{components:r})):n.createElement(m,i({ref:t},s))}));function m(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=b;var l={};for(var u in t)hasOwnProperty.call(t,u)&&(l[u]=t[u]);l.originalType=e,l[d]="string"==typeof e?e:a,i[1]=l;for(var c=2;c<o;c++)i[c]=r[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}b.displayName="MDXCreateElement"},3545:function(e,t,r){r.r(t),r.d(t,{assets:function(){return s},contentTitle:function(){return u},default:function(){return m},frontMatter:function(){return l},metadata:function(){return c},toc:function(){return d}});var n=r(7462),a=r(3366),o=(r(7294),r(3905)),i=["components"],l={id:"virtual-table",title:"virtual_table"},u=void 0,c={unversionedId:"reference/db-layer/virtual-table",id:"reference/db-layer/virtual-table",title:"virtual_table",description:"Definition",source:"@site/docs/reference/db-layer/virtual-table.md",sourceDirName:"reference/db-layer",slug:"/reference/db-layer/virtual-table",permalink:"/docs/reference/db-layer/virtual-table",draft:!1,editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/reference/db-layer/virtual-table.md",tags:[],version:"current",frontMatter:{id:"virtual-table",title:"virtual_table"},sidebar:"docs",previous:{title:"What is a measure?",permalink:"/docs/reference/kb-layer/measure/"},next:{title:"Person",permalink:"/docs/reference/ontology/person"}},s={},d=[{value:"Definition",id:"definition",level:2},{value:"Usage",id:"usage",level:2},{value:"Example: Changing a Table to a Virtual Table",id:"example-changing-a-table-to-a-virtual-table",level:3}],p={toc:d},b="wrapper";function m(e){var t=e.components,r=(0,a.Z)(e,i);return(0,o.kt)(b,(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"definition"},"Definition"),(0,o.kt)("p",null,"A ",(0,o.kt)("inlineCode",{parentName:"p"},"virtual_table")," is a powerful tool to define views based on existing tables by modifying, aggregating, or filtering the data in some way, all within the Veezoo Knowledge Graph."),(0,o.kt)("h2",{id:"usage"},"Usage"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"virtual_table")," allows you to define a new view/table using SQL that manipulates or extends the original data. You can then reference this virtual table like any other table when creating classes or defining columns."),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},(0,o.kt)("strong",{parentName:"p"},"Note"),": Virtual tables should mostly be used for prototyping more complex logic. As a best practice, once the definition is finalized, it should be moved to dbt or a similar tool for long-term maintainability and better performance.")),(0,o.kt)("h3",{id:"example-changing-a-table-to-a-virtual-table"},"Example: Changing a Table to a Virtual Table"),(0,o.kt)("p",null,"Suppose we have a dataset with order data, including the order date and customer ID. We want to create a virtual table that adds a column with the order number (e.g. the first order, second, etc.) for each customer, based on the order date."),(0,o.kt)("p",null,"We can change an existing table definition:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'db.orders_db.public {\n    table orders {\n        identifier: "orders"      \n        \n        ...\n    }\n}\n')),(0,o.kt)("p",null,"...to use ",(0,o.kt)("inlineCode",{parentName:"p"},"virtual_table")," and include a ",(0,o.kt)("inlineCode",{parentName:"p"},"virtual_table_sql")," instead:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'import: [\n    db.postgres.orders_db.public.ORDERS\n]\n\ndb.orders_db.public {\n    virtual_table orders {\n        identifier: "orders"\n\n        virtual_table_sql:\n         """\n            SELECT\n                o.*,\n                ROW_NUMBER() OVER (\n                    PARTITION BY o."customer_id"\n                    ORDER BY o."order_date" ASC\n                ) as "customer_order_number"\n            FROM\n                "orders_db"."public"."orders" o\n         """\n\n        // Define the new column\n        column customer_order_number {\n            identifier: "customer_order_number"\n            primitive_type: "INTEGER"\n        }\n\n        ...\n    }\n}\n')),(0,o.kt)("p",null,"Now you can reference it in a new integer attribute ",(0,o.kt)("inlineCode",{parentName:"p"},"Customer_Order_Number")," in your ",(0,o.kt)("inlineCode",{parentName:"p"},"Order")," class."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'kb {\n\n    class Order {\n        ...\n        \n        // Reference the new column\n        integer Customer_Order_Number {\n            name.en: "Customer Order Number"\n            sql: "${orders.customer_order_number}"\n        }\n    }\n}\n')),(0,o.kt)("p",null,"For another example, check ",(0,o.kt)("a",{parentName:"p",href:"/docs/tutorials/historized-tables"},"our tutorial on historized tables"),"."))}m.isMDXComponent=!0}}]);