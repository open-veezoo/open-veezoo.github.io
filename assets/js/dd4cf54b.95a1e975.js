"use strict";(self.webpackChunkveezoo_docs=self.webpackChunkveezoo_docs||[]).push([[1521],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return h}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),c=p(n),m=a,h=c["".concat(s,".").concat(m)]||c[m]||d[m]||i;return n?r.createElement(h,o(o({ref:t},u),{},{components:n})):r.createElement(h,o({ref:t},u))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[c]="string"==typeof e?e:a,o[1]=l;for(var p=2;p<i;p++)o[p]=n[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},4473:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return s},default:function(){return h},frontMatter:function(){return l},metadata:function(){return p},toc:function(){return c}});var r=n(7462),a=n(3366),i=(n(7294),n(3905)),o=["components"],l={},s="VQL (Veezoo Query Language)",p={unversionedId:"reference/kb-layer/vql/vql",id:"reference/kb-layer/vql/vql",title:"VQL (Veezoo Query Language)",description:"The Veezoo Query Language (VQL) acts as a bridge between natural language and SQL. When users pose questions to Veezoo, the intelligent Veezoo model translates these queries into VQL, which is then deterministically transformed into SQL.",source:"@site/docs/reference/kb-layer/vql/vql.md",sourceDirName:"reference/kb-layer/vql",slug:"/reference/kb-layer/vql/",permalink:"/docs/reference/kb-layer/vql/",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"reference",previous:{title:"Rule",permalink:"/docs/reference/kb-layer/rule/"},next:{title:"What is a function?",permalink:"/docs/reference/kb-layer/function/"}},u={},c=[{value:"Variables and Select",id:"variables-and-select",level:2},{value:"Showing Attributes",id:"showing-attributes",level:3},{value:"Filters",id:"filters",level:2},{value:"Negation",id:"negation",level:3},{value:"String Filters",id:"string-filters",level:3},{value:"Joins",id:"joins",level:2},{value:"Dates",id:"dates",level:2},{value:"Date Filters",id:"date-filters",level:3},{value:"Dynamic Dates",id:"dynamic-dates",level:3},{value:"Aggregation Functions",id:"aggregation-functions",level:2},{value:"Aggregation Over Time",id:"aggregation-over-time",level:3},{value:"Arithmetic Functions",id:"arithmetic-functions",level:2},{value:"Percentages",id:"percentages",level:3},{value:"Union",id:"union",level:2}],d={toc:c},m="wrapper";function h(e){var t=e.components,n=(0,a.Z)(e,o);return(0,i.kt)(m,(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"vql-veezoo-query-language"},"VQL (Veezoo Query Language)"),(0,i.kt)("p",null,"The Veezoo Query Language (VQL) acts as a bridge between natural language and SQL. When users pose questions to Veezoo, the intelligent Veezoo model translates these queries into VQL, which is then deterministically transformed into SQL. "),(0,i.kt)("p",null,"VQL offers the same expressiveness as SQL but operates at a higher abstraction level by utilizing the classes and attributes defined in the Veezoo Knowledge Graph instead of directly working on underlying tables and columns."),(0,i.kt)("p",null,"While viewer-users don't need access to VQL for everyday tasks, creator-users can benefit significantly from understanding VQL, particularly because:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"When Veezoo answers a question, it provides both the SQL and the corresponding VQL used. VQL is often shorter and more human-readable.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Measures, functions, and rules are defined using VQL, making it an essential tool for creators looking to leverage Veezoo's advanced capabilities."))),(0,i.kt)("h2",{id:"variables-and-select"},"Variables and Select"),(0,i.kt)("p",null,"Let's take a look at a simple VQL query that returns a list of all products:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"var product: kb.Product\n\nsingleton(product)\nselect(product)\n")),(0,i.kt)("p",null,"A typical VQL query starts by defining variables. Similar to many programming languages, variables in VQL can represent different types, such as:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"a ",(0,i.kt)("a",{parentName:"li",href:"/docs/reference/kb-layer/attribute/number"},"number"),", ",(0,i.kt)("a",{parentName:"li",href:"/docs/reference/kb-layer/attribute/string"},"string"),", or ",(0,i.kt)("a",{parentName:"li",href:"/docs/reference/kb-layer/attribute/boolean"},"boolean")),(0,i.kt)("li",{parentName:"ul"},"a ",(0,i.kt)("a",{parentName:"li",href:"#dates"},"date")),(0,i.kt)("li",{parentName:"ul"},"a specific ",(0,i.kt)("a",{parentName:"li",href:"/docs/reference/kb-layer/entity/"},"entity")," of a class"),(0,i.kt)("li",{parentName:"ul"},"a ",(0,i.kt)("a",{parentName:"li",href:"/docs/reference/kb-layer/class"},"class")," itself, as in this case ",(0,i.kt)("inlineCode",{parentName:"li"},"var product: kb.Product"))),(0,i.kt)("p",null,"In VQL, a variable like ",(0,i.kt)("inlineCode",{parentName:"p"},"product")," doesn\u2019t represent a single instance of the class but instead refers to ",(0,i.kt)("em",{parentName:"p"},"all possible instances"),". Think of a class in VQL as corresponding to an entire column or table in SQL."),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"singleton()")," function is used to indicate that the variable has no relationships with other variables. This is mostly a legacy feature and is only necessary when working with a class in isolation."),(0,i.kt)("p",null,"Finally, ",(0,i.kt)("inlineCode",{parentName:"p"},"select(product)")," specifies what the query will return. This is similar to the ",(0,i.kt)("inlineCode",{parentName:"p"},"SELECT")," statement in SQL. However, unlike SQL, the VQL ",(0,i.kt)("inlineCode",{parentName:"p"},"select()")," function can only appear once in a query (while SQL ",(0,i.kt)("inlineCode",{parentName:"p"},"SELECT")," can be used multiple times, such as in subqueries)."),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"The VQL shown to users when answers are generated is not directly translated to SQL but undergoes several rewriting steps: rewriting rules are applied, functions are replaced by their definitions, and ",(0,i.kt)("a",{parentName:"p",href:"/docs/reference/kb-layer/class/display_with"},(0,i.kt)("inlineCode",{parentName:"a"},"display_with"))," is added."),(0,i.kt)("p",{parentName:"admonition"},"The rewriting happens after the VQL is shown, keeping the shown VQL easier to understand. However, it can make it harder to see how a particular VQL translates to SQL.")),(0,i.kt)("h3",{id:"showing-attributes"},"Showing Attributes"),(0,i.kt)("p",null,"In VQL, if you want to display additional attributes, you can do it like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"var product: kb.Product\nvar category: kb.Product.Category\n\ncategory = product.Category\n\nselect(product, category)\n")),(0,i.kt)("p",null,"Here, we define a second variable called ",(0,i.kt)("inlineCode",{parentName:"p"},"category"),", which is of type ",(0,i.kt)("inlineCode",{parentName:"p"},"kb.Product.Category"),". In the third line, we assign ",(0,i.kt)("inlineCode",{parentName:"p"},"category")," to represent the categories associated with ",(0,i.kt)("inlineCode",{parentName:"p"},"product")," using the dot-operator. The expression ",(0,i.kt)("inlineCode",{parentName:"p"},"product.Category")," indicates that the class represented by ",(0,i.kt)("inlineCode",{parentName:"p"},"product")," has an attribute or a relationship called ",(0,i.kt)("inlineCode",{parentName:"p"},"Category"),"."),(0,i.kt)("p",null,"Make sure to explicitly connect the different variables in the VQL. Veezoo won't do that automatically for you."),(0,i.kt)("p",null,"Note that the dot-operator used here is different from the one in the first two lines, where it is part of the type's path."),(0,i.kt)("p",null,"This VQL can be simplified to:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"var product: kb.Product\nvar category = product.Category\n\nselect(product, category)\n")),(0,i.kt)("p",null,"In this case, the variable type is inferred automatically. The code can be further shortened (as Veezoo would generate it):"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"var product: kb.Product\n\nselect(product, product.Category)\n")),(0,i.kt)("p",null,"Notice that the ",(0,i.kt)("inlineCode",{parentName:"p"},"singleton()")," function is not needed here, as there is no single isolated candidate."),(0,i.kt)("h2",{id:"filters"},"Filters"),(0,i.kt)("p",null,"In most cases, we don't want to just return one or more attributes; we want to filter them based on certain criteria. For example, the following VQL will be generated when asking: ",(0,i.kt)("em",{parentName:"p"},"Show me Orders from the Region West"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"var order: kb.Order\n\norder.Region = kb.Order.Region.West\nselect(order)\n")),(0,i.kt)("p",null,"The second line here performs the filtering. Instead of overwriting something (as one might expect from other programming languages), we restrict the variable ",(0,i.kt)("inlineCode",{parentName:"p"},"order")," to only those with a ",(0,i.kt)("inlineCode",{parentName:"p"},"Region")," equal to the entity ",(0,i.kt)("inlineCode",{parentName:"p"},"kb.Order.Region.West"),"."),(0,i.kt)("p",null,"Filtering for numeric conditions can be done using mathematical comparisons (e.g., ",(0,i.kt)("em",{parentName:"p"},"Show orders with a quantity greater than 5"),"):"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"var order: kb.Order\n\nvar quantity = order.Quantity\nquantity > 5\nselect(order, quantity)\n")),(0,i.kt)("h3",{id:"negation"},"Negation"),(0,i.kt)("p",null,"Use the ",(0,i.kt)("inlineCode",{parentName:"p"},"not{}")," function to negate filters:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"var customer: kb.Customer\n\nnot {\n  var order: kb.Order\n  order.Customer = customer\n}\nselect(customer)\n")),(0,i.kt)("p",null,"Here, all customers without any orders are returned. It filters for no possible value within the curly brackets."),(0,i.kt)("h3",{id:"string-filters"},"String Filters"),(0,i.kt)("p",null,"For attributes of type string, Veezoo provides the following filter functions:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"starts_with_string()")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"contains_string()")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"ends_with_string()"))),(0,i.kt)("p",null,"These functions take two arguments: the string to be filtered and the value to compare it to:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'var customer: kb.Customer\n\nvar name = customer.fullName\nstarts_with_string(name, "Lukas")\nselect(name, customer)\n')),(0,i.kt)("p",null,"Here, we select customers whose full name starts with ",(0,i.kt)("em",{parentName:"p"},"Lukas"),"."),(0,i.kt)("p",null,"All of these string filters are case-insensitive."),(0,i.kt)("h2",{id:"joins"},"Joins"),(0,i.kt)("p",null,"Connecting two classes in VQL, which corresponds to joining two tables in SQL or accessing a column of a class, works similarly to filtering entities. For example, here is the VQL for the question ",(0,i.kt)("em",{parentName:"p"},"Show me all orders from customers with segment consumer"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"var order: kb.Order\n\nvar customer = order.with_Customer\ncustomer.Segment = kb.Customer.Segment.Consumer\n\nselect(order, customer)\n")),(0,i.kt)("p",null,"In the second line, we connect the order and customer classes, which will join the order and customer tables in SQL. We define the ",(0,i.kt)("inlineCode",{parentName:"p"},"customer")," variable to be the customers from the orders, i.e. ",(0,i.kt)("inlineCode",{parentName:"p"},"order.with_Customer"),",  which will be mapped to the ",(0,i.kt)("inlineCode",{parentName:"p"},"customer")," foreign key column in the order table in SQL."),(0,i.kt)("p",null,"In the next line, we specify that we only want customers with the segment ",(0,i.kt)("inlineCode",{parentName:"p"},"Consumer"),". Since the orders and customers are already connected, this filter also affects the orders."),(0,i.kt)("p",null,"Finally, we return the orders and their customers."),(0,i.kt)("h2",{id:"dates"},"Dates"),(0,i.kt)("p",null,"VQL has rich support for ",(0,i.kt)("a",{parentName:"p",href:"/docs/reference/kb-layer/attribute/date"},"dates"),", allowing you to filter and convert them to different granularities. "),(0,i.kt)("h3",{id:"date-filters"},"Date Filters"),(0,i.kt)("p",null,"If a class has a ",(0,i.kt)("inlineCode",{parentName:"p"},"date")," field, filtering for dates can be done similarly to filtering for other numeric values:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'var order: kb.Order\n\nvar orderDate = order.Order_Date\norderDate > date("2022-05-01")\nselect(order, orderDate)\n')),(0,i.kt)("p",null,"The expression ",(0,i.kt)("inlineCode",{parentName:"p"},'date("2022-05-01")')," returns a date object for May 1st, 2022."),(0,i.kt)("p",null,"To filter for dates within a specific period, use the ",(0,i.kt)("inlineCode",{parentName:"p"},"date_in()")," function:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'var order: kb.Order\n\nvar orderDate = order.Order_Date\ndate_in(orderDate, date("2023"))\nselect(order, orderDate)\n')),(0,i.kt)("p",null,"Similarly, the ",(0,i.kt)("inlineCode",{parentName:"p"},"date_in_range()")," function can be used to filter for dates between a start and end point:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'date_in_range(date("1995-10-24"), orderDate, date("2008-05-13"))\n')),(0,i.kt)("h3",{id:"dynamic-dates"},"Dynamic Dates"),(0,i.kt)("p",null,"Besides static dates (which refer to a fixed point in time) VQL also offers support for dynamic dates like ",(0,i.kt)("em",{parentName:"p"},"this year")," or ",(0,i.kt)("em",{parentName:"p"},"last month"),". This is helpful in keeping dashboards up to date. If a widget is created by asking the question ",(0,i.kt)("em",{parentName:"p"},"How many orders last week"),", the widget will show data for the week prior to the current date, instead of always keeping to show data for the week before the question was asked."),(0,i.kt)("p",null,"There are two types of dynamic dates. The first option is using the ",(0,i.kt)("inlineCode",{parentName:"p"},"date()")," function with certain special arguments:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'var order: kb.Order\n\nvar orderDate = order.Order_Date\ndate_in(orderDate, date("#thisYear"))\nselect(order, orderDate)\n')),(0,i.kt)("p",null,"These values include:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"#now")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"#today")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"#yesterday")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"#thisYear")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"#lastYear")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"#nextYear")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"#thisQuarter")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"#thisMonth")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"#lastMonth")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"#thisWeek"))),(0,i.kt)("p",null,"The other option is to use the ",(0,i.kt)("inlineCode",{parentName:"p"},"dynamic_date()")," function, which takes a phrase and a language as input:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'var order: kb.Order\n\nvar orderDate = order.Order_Date\ndate_in(orderDate, dynamic_date("last month", "en"))\nselect(order, orderDate)\n')),(0,i.kt)("p",null,"When both are able to express the same dynamic date (e.g. ",(0,i.kt)("inlineCode",{parentName:"p"},'date("#lastMonth")')," and ",(0,i.kt)("inlineCode",{parentName:"p"},'dynamic_date("last month", "en")'),"), these two methods are equivalent,",(0,i.kt)("inlineCode",{parentName:"p"},"dynamic_date()")," does offer more possible arguments though."),(0,i.kt)("h2",{id:"aggregation-functions"},"Aggregation Functions"),(0,i.kt)("p",null,"VQL aggregation functions work similarly to SQL:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"var order: kb.Order\n\nvar profit = order.Profit\n\nvar sumProfit = sum(profit)\nvar averageProfit = average(profit)\nvar countOrder = count(order)\n\nselect(sumProfit, averageProfit, countOrder)\n")),(0,i.kt)("p",null,"The aggregation functions can also be used directly in the ",(0,i.kt)("inlineCode",{parentName:"p"},"select")," statement:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"var order: kb.Order\n\nvar profit = order.Profit\nselect(sum(profit), average(profit), count(order))\n")),(0,i.kt)("p",null,"As in SQL, aggregation functions can be grouped by one or more attributes. For example, if we want the ",(0,i.kt)("em",{parentName:"p"},"Average Profit of Orders by Shipping Mode"),", instead of calculating the average profit for all orders, we divide the orders into groups based on their shipping mode and then calculate the average per group:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"var order: kb.Order\n\nvar shippingMode = order.Shipping_Mode\nselect(average(order.Profit) by (shippingMode), shippingMode)\n")),(0,i.kt)("p",null,"The shipping mode must be included in the ",(0,i.kt)("inlineCode",{parentName:"p"},"select")," statement (not just in the ",(0,i.kt)("inlineCode",{parentName:"p"},"by")," clause) so that users can see which case the aggregated numbers represent. Let's look at another example, ",(0,i.kt)("em",{parentName:"p"},"Average Profit of Orders by Shipping Mode and Region"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"var order: kb.Order\n\nvar region = order.Region\nvar shippingMode = order.Shipping_Mode\nselect(average(order.Profit) by (shippingMode, region), shippingMode, region)\n")),(0,i.kt)("h3",{id:"aggregation-over-time"},"Aggregation Over Time"),(0,i.kt)("p",null,"A common form of aggregation is over a certain timespan, such as day, week, or year. This involves some extra steps. The following example calculates the ",(0,i.kt)("em",{parentName:"p"},"Average Discount of Orders by Week"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'var order: kb.Order\nvar week = periodicity("P1W")\n\nvar orderDate = order.Order_Date\nproject_date(orderDate, week)\nselect(average(sum(order.Discount) by (week)))\n')),(0,i.kt)("p",null,"The line ",(0,i.kt)("inlineCode",{parentName:"p"},'var week = periodicity("P1W")')," defines the time duration for aggregation. The variable ",(0,i.kt)("inlineCode",{parentName:"p"},"week")," is then passed into the ",(0,i.kt)("inlineCode",{parentName:"p"},"project_date()")," function, where the ",(0,i.kt)("inlineCode",{parentName:"p"},"week")," periodicity is assigned the week of the ",(0,i.kt)("inlineCode",{parentName:"p"},"Order_Date"),". Finally, we can aggregate by week."),(0,i.kt)("h2",{id:"arithmetic-functions"},"Arithmetic Functions"),(0,i.kt)("p",null,"VQL supports arithmetic functions like ",(0,i.kt)("inlineCode",{parentName:"p"},"+"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"-"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"/"),", or ",(0,i.kt)("inlineCode",{parentName:"p"},"*")," to perform calculations. For example, to calculate the total order value minus the value-added tax:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"var order: kb.Order\n\nselect(sum(order.value) - sum(order.VAT))\n")),(0,i.kt)("p",null,"Arithmetic functions can also be used with grouped aggregations. Here, we calculate the same value but grouped by month:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'var order: kb.Order\nvar month = periodicity("P1M")\n\nproject_date(order.order_date, month)\nselect(sum(order.value) by (month) - sum(order.VAT) by (month), month)\n')),(0,i.kt)("p",null,"In such cases, both operands need to be aggregated at the same level of granularity."),(0,i.kt)("h3",{id:"percentages"},"Percentages"),(0,i.kt)("p",null,"To calculate percentages, VQL provides the ",(0,i.kt)("inlineCode",{parentName:"p"},"proportion() {}")," function. For example, to calculate the percentage of customers who live in Zurich:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"var customer: kb.Customer\n\nvar proportion = proportion(customer) {\n  customer.lives_in = kb.City.Zurich\n}\nselect(proportion)\n")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"proportion()")," function works by calculating the overall count or sum as the denominator, and then applying the filter inside the curly braces to calculate a restricted count or sum as the numerator."),(0,i.kt)("p",null,"This means that, for example, if an ",(0,i.kt)("inlineCode",{parentName:"p"},"order")," has a ",(0,i.kt)("inlineCode",{parentName:"p"},"value")," and a ",(0,i.kt)("inlineCode",{parentName:"p"},"VAT"),", it is NOT possible to use this function to calculate what percentage of the value the VAT represents, since ",(0,i.kt)("inlineCode",{parentName:"p"},"order.VAT")," is not a subset of ",(0,i.kt)("inlineCode",{parentName:"p"},"order.value"),"."),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"proportion() {}")," function can also be used with grouped data. For instance, to calculate the same percentage but grouped by customer segment:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"var customer: kb.Customer\n\nvar segment = customer.customer_segment\nvar proportion = proportion(customer) {\n  customer.lives_in = kb.City.Zurich\n} by (segment)\nselect(segment, proportion)\n")),(0,i.kt)("h2",{id:"union"},"Union"),(0,i.kt)("p",null,"In many cases, users want to filter for multiple possible options. For example, ",(0,i.kt)("em",{parentName:"p"},"Show customers from Zurich and Ljubljana")," or ",(0,i.kt)("em",{parentName:"p"},"Show premium customers and customers with high cancellation risk"),". To achieve this, Veezoo provides two versions of the ",(0,i.kt)("inlineCode",{parentName:"p"},"union")," function."),(0,i.kt)("p",null,"In simpler scenarios, where you want to combine different entities of the same class (as in the first example), you can do it like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"var customer: kb.Customer\n\nvar city = union(kb.City.Zurich, kb.City.Ljubljana)\ncustomer.lives_in = city\n\nselect(city, customer)\n")),(0,i.kt)("p",null,"Here, ",(0,i.kt)("inlineCode",{parentName:"p"},"var city")," represents the union of Zurich and Ljubljana, and the following line filters out all customers who do not live in either city. The ",(0,i.kt)("inlineCode",{parentName:"p"},"union")," function can include any number of entities."),(0,i.kt)("p",null,"For more complex cases, where you want to combine different conditions, the syntax changes. In the following case we want to select customers, which are either premium customers, or have a high cancellation risk associated with them:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"var customer: kb.Customer\n\nvar caseIdentifier = {\n  customer.is_premium = true\n} union {\n  customer.cancellation_risk = kb.Customer.cancellation_risk.high\n}\n\nselect(caseIdentifier, customer)\n")),(0,i.kt)("p",null,"This version of the ",(0,i.kt)("inlineCode",{parentName:"p"},"union")," function does two things:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"It restricts ",(0,i.kt)("inlineCode",{parentName:"li"},"customer")," to those who are either premium OR have a high cancellation risk."),(0,i.kt)("li",{parentName:"ul"},"It creates ",(0,i.kt)("inlineCode",{parentName:"li"},"var caseIdentifier"),", which contains labels for all the possible cases that are part of the union. This is also selected, allowing the user to see why a particular customer is shown (e.g., ",(0,i.kt)("em",{parentName:"li"},"Yanick Brecher")," is shown because he is a ",(0,i.kt)("em",{parentName:"li"},"premium customer"),").")))}h.isMDXComponent=!0}}]);