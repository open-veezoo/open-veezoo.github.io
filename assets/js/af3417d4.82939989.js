"use strict";(self.webpackChunkveezoo_docs=self.webpackChunkveezoo_docs||[]).push([[9974],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return m}});var i=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=i.createContext({}),u=function(e){var t=i.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=u(e.components);return i.createElement(s.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},f=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=u(n),f=a,m=p["".concat(s,".").concat(f)]||p[f]||d[f]||r;return n?i.createElement(m,o(o({ref:t},c),{},{components:n})):i.createElement(m,o({ref:t},c))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,o=new Array(r);o[0]=f;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[p]="string"==typeof e?e:a,o[1]=l;for(var u=2;u<r;u++)o[u]=n[u];return i.createElement.apply(null,o)}return i.createElement.apply(null,n)}f.displayName="MDXCreateElement"},5973:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return s},default:function(){return m},frontMatter:function(){return l},metadata:function(){return u},toc:function(){return p}});var i=n(7462),a=n(3366),r=(n(7294),n(3905)),o=["components"],l={id:"default_filter",title:"default_filter",sidebar_label:"\u2699\ufe0f default_filter"},s=void 0,u={unversionedId:"reference/kb-layer/class/default_filter",id:"reference/kb-layer/class/default_filter",title:"default_filter",description:"Definition",source:"@site/docs/reference/kb-layer/class/default_filter.md",sourceDirName:"reference/kb-layer/class",slug:"/reference/kb-layer/class/default_filter",permalink:"/docs/reference/kb-layer/class/default_filter",draft:!1,tags:[],version:"current",frontMatter:{id:"default_filter",title:"default_filter",sidebar_label:"\u2699\ufe0f default_filter"},sidebar:"reference",previous:{title:"\u2699\ufe0f default_order",permalink:"/docs/reference/kb-layer/class/default_order"},next:{title:"\u2699\ufe0f display_with",permalink:"/docs/reference/kb-layer/class/display_with"}},c={},p=[{value:"Definition",id:"definition",level:2},{value:"Usage",id:"usage",level:2},{value:"Boolean Filter",id:"boolean-filter",level:3},{value:"Entity Filter",id:"entity-filter",level:3},{value:"Numeric filters",id:"numeric-filters",level:3},{value:"Filters across classes",id:"filters-across-classes",level:3},{value:"Refactoring",id:"refactoring",level:3},{value:"Conditional Default Filters",id:"conditional-default-filters",level:2}],d={toc:p},f="wrapper";function m(e){var t=e.components,n=(0,a.Z)(e,o);return(0,r.kt)(f,(0,i.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"definition"},"Definition"),(0,r.kt)("p",null,"A ",(0,r.kt)("inlineCode",{parentName:"p"},"default_filter")," is a filter expression for a class that is applied by default if no conflicting filter was already explicitly asked for in a question."),(0,r.kt)("p",null,'With it you are able to model more accurately the language inside your company. An example is when we have subscriptions in the data, but it contains also cancelled ones. Yet, when people ask about subscriptions, they intuitively expect to see only "active" ones. With ',(0,r.kt)("inlineCode",{parentName:"p"},"default_filter"),', you don\'t need to pass the burden to the user of remembering to ask for "active", while not limiting their experience, if asking for "inactive" subscriptions is also a common use case.'),(0,r.kt)("p",null,"Whenever you set a ",(0,r.kt)("inlineCode",{parentName:"p"},"default_filter"),", the users will see it clearly in the answer with the possibility to remove it by clicking on it."),(0,r.kt)("iframe",{width:"800",height:"500",src:"https://www.youtube.com/embed/jIdIdXz9_O4?si=LjsPceT3pj87pDdZ",title:"YouTube video player",frameborder:"0",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share",allowfullscreen:!0}),(0,r.kt)("h2",{id:"usage"},"Usage"),(0,r.kt)("h3",{id:"boolean-filter"},"Boolean Filter"),(0,r.kt)("p",null,"Let's take the example above. We have a class ",(0,r.kt)("inlineCode",{parentName:"p"},"kb.Subscription")," with a ",(0,r.kt)("inlineCode",{parentName:"p"},"boolean is_Active"),". This is how you would define it, using the VQL (Veezoo Query Language) syntax:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'kb {\n\n    class Subscription {\n\n        name.en: "Subscription"\n\n        ...\n\n\n        default_filter: """\n            this.is_Active = true\n        """\n\n        boolean is_Active { ... }\n\n    }\n\n}\n')),(0,r.kt)("p",null,"Notice the usage of ",(0,r.kt)("inlineCode",{parentName:"p"},"this"),", which refers to the ",(0,r.kt)("inlineCode",{parentName:"p"},"Subscription")," class."),(0,r.kt)("p",null,"What if you have two filters? Just create a list of all of them to create multiple independent default filters."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'kb {\n\n    class Subscription {\n\n        name.en: "Subscription"\n\n        ...\n\n\n        /* Create a list using [...] */\n        default_filter: [\n            "this.is_Active = true",\n            "this.is_Valid = true"\n        ]\n\n        boolean is_Active { ... }\n\n        boolean is_Valid { ... }\n\n    }\n\n}\n')),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"We recommend you keep the default filters simple, and split them up into multiple filters instead of one big filter for the best experience.\nCombining multiple default filters into one filter will make them interact in unexpected ways.\nIf the example above was a single default filter instead of two it would for example not add the active filter if a valid filter is already present.")),(0,r.kt)("h3",{id:"entity-filter"},"Entity Filter"),(0,r.kt)("p",null,"Now, maybe there is no ",(0,r.kt)("inlineCode",{parentName:"p"},"is_Active")," flag, but rather a ",(0,r.kt)("inlineCode",{parentName:"p"},"Status")," which can be 'Active'."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'kb {\n\n    class Subscription {\n\n        name.en: "Subscription"\n\n        ...\n\n        default_filter: """\n            this.Status = kb.Subscription.Status.Active  # Tip: Let the Editor\'s Autocomplete help you find the right way to refer to the Status Active here\n        """\n\n        /** This is a class Status with entities like kb.Status.Active. */\n        class Status { ... }\n\n    }\n\n}\n')),(0,r.kt)("p",null,'In this case, if you would ask "how many subscriptions per status", Veezoo is smart enough to know not to apply the ',(0,r.kt)("inlineCode",{parentName:"p"},"default_filter"),"."),(0,r.kt)("p",null,"For negations, do it like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'default_filter: """\n    this.Status != kb.Subscription.Status.Cancelled\n"""\n')),(0,r.kt)("p",null,"Finally, maybe there are multiple statuses that you need to consider. For this case, we use a ",(0,r.kt)("inlineCode",{parentName:"p"},"union"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'default_filter: """\n    this.Status = union(kb.Subscription.Status.Active, kb.Subscription.Status.On_Hold)\n"""\n')),(0,r.kt)("h3",{id:"numeric-filters"},"Numeric filters"),(0,r.kt)("p",null,"Let's say instead that we want to keep only those subscriptions by default with a positive subscription amount."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'default_filter: """\n    this.Amount > 0\n"""\n')),(0,r.kt)("p",null,"For numeric filters, we support: ",(0,r.kt)("inlineCode",{parentName:"p"},"<"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"<="),", ",(0,r.kt)("inlineCode",{parentName:"p"},">")," and ",(0,r.kt)("inlineCode",{parentName:"p"},">="),". We also support numeric operators like ",(0,r.kt)("inlineCode",{parentName:"p"},"*"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"+"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"/")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"-"),"."),(0,r.kt)("h3",{id:"filters-across-classes"},"Filters across classes"),(0,r.kt)("p",null,"What if we need to filter out subscriptions that have a inactive customer (according to a separate class and table)?"),(0,r.kt)("p",null,"This is how the default filter would change:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'kb {\n\n    class Subscription {\n        ...\n\n        relationship from_Customer { ... }\n        \n        default_filter: """\n            var c: kb.Customer     # think of this like the following SQL: FROM customers c\n\n            this.from_Customer = c\n            c.is_Active = true\n        """\n    }\n}\n')),(0,r.kt)("p",null,"This can be made shorter:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'default_filter: """\n    this.from_Customer.is_Active = true\n"""\n')),(0,r.kt)("p",null,"Now, let's go a bit wild. "),(0,r.kt)("p",null,"Let's say we have subscriptions and actual orders. And subscriptions should by default include only those with customers that had at least 2 orders at any point in time."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'default_filter: """\n    var c: kb.Customer\n\n    # c is this subscription\'s customer\n    this.from_Customer = c\n\n    var o: kb.Order         # these are orders from the same customer\n    o.from_Customer = c\n    \n    # let\'s count these orders here for each customer\n    var number_of_orders = count(o) by c\n    \n    # only those customers with at least 2 orders\n    number_of_orders >= 2\n"""\n')),(0,r.kt)("h3",{id:"refactoring"},"Refactoring"),(0,r.kt)("p",null,"Now this could get unnecessarily complicated and usually you will want to push certain definitions down to the data warehouse as part of your transformation layer (e.g. using dbt), especially if other applications or data consumers would benefit from it. This will allow you to have just a simple boolean flag and then we are back to the first example."),(0,r.kt)("p",null,"If for whatever reason you don't want to do so, you can also define a ",(0,r.kt)("inlineCode",{parentName:"p"},"boolean")," in Veezoo with the code from your more complicated ",(0,r.kt)("inlineCode",{parentName:"p"},"default_filter"),"."),(0,r.kt)("p",null,"Let's take it from the last example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'kb {\n    class Subscription {\n\n        ...\n\n        default_filter: "this.is_Active = true"\n\n        boolean is_Active {\n            name.en: "Active"\n\n            description.en:\n                "A subscription is active if it is from a customer that made at least two orders."\n\n            definition: """\n                var c: kb.Customer\n\n                # c is this subscription\'s customer\n                this.from_Customer = c\n\n                var o: kb.Order         # these are orders from the same customer\n                o.from_Customer = c\n                \n                # let\'s count these orders here for each customer\n                var number_of_orders = count(o) by c\n                \n                # only those customers with at least 2 orders\n                number_of_orders >= 2\n            """\n        }\n    }\n}\n')),(0,r.kt)("p",null,"Or better, defining it in the ",(0,r.kt)("inlineCode",{parentName:"p"},"kb.Customer")," class."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'kb {\n\n    class Customer {\n\n        ...\n\n        default_filter: "this.is_Active = true"\n\n        boolean is_Active {\n            name.en: "Active"\n\n            description.en: "A customer that made at least two orders is deemed active."\n\n            definition: """\n                var o: kb.Order\n                o.from_Customer = this\n                            \n                var number_of_orders = count(o)\n                number_of_orders >= 2\n            """\n        }\n    }\n}\n')),(0,r.kt)("p",null,"Now, you can define the ",(0,r.kt)("inlineCode",{parentName:"p"},"default_filter")," for ",(0,r.kt)("inlineCode",{parentName:"p"},"Subscription")," as simply:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'kb {\n    class Subscription {\n            ...\n\n            relationship from_Customer { ... }\n            \n            default_filter: "this.from_Customer"\n    }   \n}   \n')),(0,r.kt)("p",null,"This may seem a bit less intuitive at first sight, but it means that the subscription has by default a customer set, which is itself by default active."),(0,r.kt)("p",null,"Ok, now that you know how to do all of this, remember the golden rule: Keep It Simple, Stupid."),(0,r.kt)("h2",{id:"conditional-default-filters"},"Conditional Default Filters"),(0,r.kt)("p",null,"With a ",(0,r.kt)("inlineCode",{parentName:"p"},"condition")," it is possible to have a ",(0,r.kt)("inlineCode",{parentName:"p"},"default_filter")," which only applies in certain situations. It also enables you to add a ",(0,r.kt)("inlineCode",{parentName:"p"},"default_filter")," attribute on concepts like ",(0,r.kt)("inlineCode",{parentName:"p"},"integers")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"measures")," which normally wouldn't allow to have one directly."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'kb {\n    class Subscription {\n        ...\n\n        default_filter: {\n            filter: "this.is_Active = true"\n            condition: "kb.Subscription.ClickThroughRate(this)"\n        }\n\n        measure ClickThroughRate { ... }\n\n        boolean is_Active { ... }\n    }\n}\n')),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"condition")," works similarly to the one found in ",(0,r.kt)("a",{parentName:"p",href:"/docs/reference/kb-layer/rule"},"rules"),". It is one or more lines of VQL code, which if present in the question, tell Veezoo to add the filter. In the example above it simply states ",(0,r.kt)("em",{parentName:"p"},"If the ClickThroughRate is present in the question, add the filter that is_Active has to be true"),"."),(0,r.kt)("p",null,"As with default filters without a condition, it is possible to have multiple ones with:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'kb {\n    class Subscription {\n        ...\n\n        default_filter: [\n            {\n                filter: "this.is_Active = true"\n                condition: "kb.Subscription.ClickThroughRate(this)"\n            },\n            {\n                filter: "this.is_Trial_Account = false"\n                condition: "average(this.SubscriptionFee)"\n            }\n        ]\n\n        measure ClickThroughRate { ... }\n\n        integer SubscriptionFee { ... }\n\n        boolean is_Active { ... }\n    }\n}\n')),(0,r.kt)("p",null,"Here, in this second filter, Veezoo is told to add a filter excluding trial accounts if the average subscription fee is calculated. Note that the filter would not be added, if asked about subscription fees more generally. "),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"condition")," can also be negative. With a ",(0,r.kt)("inlineCode",{parentName:"p"},"@missing {...}")," block, a default filter can be added, when a line of VQL-code does not appear in the question. This is a very common use case. "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'kb {\n    class Subscription {\n        ...\n\n        default_filter: {\n            filter: "this.is_Active = true"\n            condition: "@missing {kb.Subscription.cancellation_Date}"\n        }\n\n        boolean is_Active { ... }\n\n        date cancellation_Date { ... }\n    }\n}\n')),(0,r.kt)("p",null,"In this case here, the filter ",(0,r.kt)("inlineCode",{parentName:"p"},"is_Active")," is always added, except in questions about about the cancellation date, in which case it woulnd't make much sense to talk about active accounts."))}m.isMDXComponent=!0}}]);