"use strict";(self.webpackChunkveezoo_docs=self.webpackChunkveezoo_docs||[]).push([[4623],{3905:function(e,n,t){t.d(n,{Zo:function(){return c},kt:function(){return m}});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=r.createContext({}),u=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},c=function(e){var n=u(e.components);return r.createElement(s.Provider,{value:n},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},f=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=u(t),f=o,m=p["".concat(s,".").concat(f)]||p[f]||d[f]||a;return t?r.createElement(m,i(i({ref:n},c),{},{components:t})):r.createElement(m,i({ref:n},c))}));function m(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=f;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[p]="string"==typeof e?e:o,i[1]=l;for(var u=2;u<a;u++)i[u]=t[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}f.displayName="MDXCreateElement"},7066:function(e,n,t){t.r(n),t.d(n,{assets:function(){return c},contentTitle:function(){return s},default:function(){return m},frontMatter:function(){return l},metadata:function(){return u},toc:function(){return p}});var r=t(7462),o=t(3366),a=(t(7294),t(3905)),i=["components"],l={id:"boolean",title:"boolean"},s=void 0,u={unversionedId:"reference/kb-layer/attribute/boolean",id:"reference/kb-layer/attribute/boolean",title:"boolean",description:"Definition",source:"@site/docs/reference/kb-layer/attribute/boolean.md",sourceDirName:"reference/kb-layer/attribute",slug:"/reference/kb-layer/attribute/boolean",permalink:"/docs/reference/kb-layer/attribute/boolean",draft:!1,tags:[],version:"current",frontMatter:{id:"boolean",title:"boolean"},sidebar:"reference",previous:{title:"number",permalink:"/docs/reference/kb-layer/attribute/number"},next:{title:"class",permalink:"/docs/reference/kb-layer/attribute/class"}},c={},p=[{value:"Definition",id:"definition",level:2},{value:"Usage",id:"usage",level:2},{value:"Naming the Negated Case",id:"naming-the-negated-case",level:3}],d={toc:p},f="wrapper";function m(e){var n=e.components,t=(0,o.Z)(e,i);return(0,a.kt)(f,(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"definition"},"Definition"),(0,a.kt)("p",null,"A ",(0,a.kt)("inlineCode",{parentName:"p"},"boolean")," is used whenever you have a column or SQL expression that returns ",(0,a.kt)("inlineCode",{parentName:"p"},"True")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"False")," (i.e., yes or no)."),(0,a.kt)("h2",{id:"usage"},"Usage"),(0,a.kt)("p",null,"Assume our order table contains a column indicating whether an order was returned ('yes') or not ('no'). To configure this column as a boolean attribute, we use the following VKL definition:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'import: [\n    db.postgres.movie_db.public.ORDERS\n]\n\nkb {\n    class Order {\n\n        ...\n\n        boolean Returned {\n            name.en: "Returned"\n\n            sql: "${ORDERS.returned} = \'yes\'"\n        }\n    }\n}\n')),(0,a.kt)("p",null,"For ",(0,a.kt)("inlineCode",{parentName:"p"},"boolean"),", the ",(0,a.kt)("inlineCode",{parentName:"p"},"sql")," property can be any kind of SQL boolean expression."),(0,a.kt)("p",null,"The name of a boolean attribute refers to the case where the SQL expression evaluates to ",(0,a.kt)("inlineCode",{parentName:"p"},"True"),'. That is, asking about "Returned Orders" will show the orders whose ',(0,a.kt)("inlineCode",{parentName:"p"},"Returned")," boolean is ",(0,a.kt)("inlineCode",{parentName:"p"},"True"),". "),(0,a.kt)("h3",{id:"naming-the-negated-case"},"Naming the Negated Case"),(0,a.kt)("p",null,"Veezoo allows optionally providing a name and synonyms for the case when the boolean is ",(0,a.kt)("inlineCode",{parentName:"p"},"False"),"."),(0,a.kt)("p",null,"For instance, assume we are using Veezoo on a flight dataset indicating for each flight the origin and destination country. We would like to model whether a flight is domestic using a ",(0,a.kt)("inlineCode",{parentName:"p"},"boolean"),'. If a flight is not domestic, it is international. We can instruct Veezoo to treat "international" as a synonym for "not domestic" using the ',(0,a.kt)("inlineCode",{parentName:"p"},"negated")," property as follows:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'import: [\n    db.postgres.flights_db.public.FLIGHTS\n]\n\nkb {\n\n    class Flight {\n\n        ...\n        boolean is_Domestic {\n            name.en: "Domestic"\n\n            sql: "${FLIGHTS.from_country} = ${FLIGHTS.to_country}"\n\n            negated: {\n                name.en: "International"\n            }\n        }\n    }\n}\n')),(0,a.kt)("p",null,'We can define additional synonyms for "international" by adding ',(0,a.kt)("inlineCode",{parentName:"p"},"synonym")," properties inside the ",(0,a.kt)("inlineCode",{parentName:"p"},"negated")," object."))}m.isMDXComponent=!0}}]);