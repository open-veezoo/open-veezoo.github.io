"use strict";(self.webpackChunkveezoo_docs=self.webpackChunkveezoo_docs||[]).push([[1778],{3905:function(e,n,t){t.d(n,{Zo:function(){return c},kt:function(){return f}});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=r.createContext({}),p=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},c=function(e){var n=p(e.components);return r.createElement(s.Provider,{value:n},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=p(t),m=o,f=u["".concat(s,".").concat(m)]||u[m]||d[m]||i;return t?r.createElement(f,a(a({ref:n},c),{},{components:t})):r.createElement(f,a({ref:n},c))}));function f(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,a=new Array(i);a[0]=m;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[u]="string"==typeof e?e:o,a[1]=l;for(var p=2;p<i;p++)a[p]=t[p];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},9619:function(e,n,t){t.r(n),t.d(n,{assets:function(){return c},contentTitle:function(){return s},default:function(){return f},frontMatter:function(){return l},metadata:function(){return p},toc:function(){return u}});var r=t(7462),o=t(3366),i=(t(7294),t(3905)),a=["components"],l={},s=void 0,p={unversionedId:"reference/kb-layer/relationship/sql",id:"reference/kb-layer/relationship/sql",title:"sql",description:"Definition",source:"@site/docs/reference/kb-layer/relationship/sql.md",sourceDirName:"reference/kb-layer/relationship",slug:"/reference/kb-layer/relationship/sql",permalink:"/docs/reference/kb-layer/relationship/sql",draft:!1,editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/reference/kb-layer/relationship/sql.md",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"to_synonym",permalink:"/docs/reference/kb-layer/relationship/to_synonym"},next:{title:"What is an attribute?",permalink:"/docs/reference/kb-layer/attribute"}},c={},u=[{value:"Definition",id:"definition",level:2},{value:"Usage",id:"usage",level:2}],d={toc:u},m="wrapper";function f(e){var n=e.components,t=(0,o.Z)(e,a);return(0,i.kt)(m,(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"definition"},"Definition"),(0,i.kt)("p",null,"A relationship in VKL describes how classes relate to each other."),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"sql")," property specifies how these classes connect to each other in the database. These are usually foreign keys in your database."),(0,i.kt)("h2",{id:"usage"},"Usage"),(0,i.kt)("p",null,"Let's say we have the following tables: ",(0,i.kt)("inlineCode",{parentName:"p"},"CUSTOMER(id, name)")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"ORDER(id, customer_id, total_order)"),"."),(0,i.kt)("p",null,"In this case of Foreign Keys, the ",(0,i.kt)("inlineCode",{parentName:"p"},"sql")," of the connecting classes (e.g. ",(0,i.kt)("inlineCode",{parentName:"p"},"kb.Order")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"kb.Customer"),") are not both in the same table."),(0,i.kt)("p",null,"Now, ",(0,i.kt)("inlineCode",{parentName:"p"},"customer_id")," is a foreign key pointing to the ",(0,i.kt)("inlineCode",{parentName:"p"},"CUSTOMER")," table. This is how our new classes and relationship will look like."),(0,i.kt)("p",null,"File: ",(0,i.kt)("em",{parentName:"p"},"hitchhiker/knowledge-base/classes/Customer.vkl")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'import: [\n    db.postgres.movie_db.public.CUSTOMER\n]\n\nkb {\n\n    class Customer {\n        name.en: "Customer"\n\n        sql: "${CUSTOMER.id}"\n        name_sql: "${CUSTOMER.name}"\n    }\n}\n')),(0,i.kt)("p",null,"File: ",(0,i.kt)("em",{parentName:"p"},"hitchhiker/knowledge-base/classes/Order.vkl")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'import: [\n    db.postgres.movie_db.public.ORDER\n]\n\nkb {\n\n    class Order {\n        name.en: "Order"\n        sql: "${ORDER.id}"\n\n        relationship from_Customer {\n            to: kb.Customer\n            sql: "${ORDER.customer_id}"\n        }\n\n        ...\n    }\n}\n')),(0,i.kt)("p",null,"The relationship ",(0,i.kt)("inlineCode",{parentName:"p"},"from_Customer")," has a ",(0,i.kt)("inlineCode",{parentName:"p"},"sql")," defined that uses the foreign key column ",(0,i.kt)("inlineCode",{parentName:"p"},"customer_id"),". Since the ",(0,i.kt)("inlineCode",{parentName:"p"},"to")," is set to ",(0,i.kt)("inlineCode",{parentName:"p"},"kb.Customer"),", Veezoo can now correctly do the join using the ",(0,i.kt)("inlineCode",{parentName:"p"},"sql")," from the relationship and the ",(0,i.kt)("inlineCode",{parentName:"p"},"sql")," from the referenced class ",(0,i.kt)("inlineCode",{parentName:"p"},"kb.Customer"),", like this: ",(0,i.kt)("inlineCode",{parentName:"p"},"${ORDER.customer_id} = ${CUSTOMER.id}"),"."),(0,i.kt)("p",null,"Keep in mind that ",(0,i.kt)("inlineCode",{parentName:"p"},"sql"),' accepts any kind of SQL expression (e.g. concatenation of multiple columns) and therefore the join does not need to be of the type "column A = column B".\nFor joins that need to go over multiple tables or have a more advanced SQL expression, refer to ',(0,i.kt)("a",{parentName:"p",href:"/docs/reference/kb-layer/general/join"},"join"),"."))}f.isMDXComponent=!0}}]);