"use strict";(self.webpackChunkveezoo_docs=self.webpackChunkveezoo_docs||[]).push([[1340],{3905:function(e,t,r){r.d(t,{Zo:function(){return u},kt:function(){return m}});var a=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},i=Object.keys(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var l=a.createContext({}),d=function(e){var t=a.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},u=function(e){var t=d(e.components);return a.createElement(l.Provider,{value:t},e.children)},c="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,i=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),c=d(r),p=n,m=c["".concat(l,".").concat(p)]||c[p]||h[p]||i;return r?a.createElement(m,o(o({ref:t},u),{},{components:r})):a.createElement(m,o({ref:t},u))}));function m(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=r.length,o=new Array(i);o[0]=p;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[c]="string"==typeof e?e:n,o[1]=s;for(var d=2;d<i;d++)o[d]=r[d];return a.createElement.apply(null,o)}return a.createElement.apply(null,r)}p.displayName="MDXCreateElement"},1683:function(e,t,r){r.r(t),r.d(t,{assets:function(){return c},contentTitle:function(){return d},default:function(){return f},frontMatter:function(){return l},metadata:function(){return u},toc:function(){return h}});var a=r(7462),n=r(3366),i=(r(7294),r(3905)),o=r(4996),s=["components"],l={id:"historized-tables",title:"Working with historized tables"},d="Working with historized tables",u={unversionedId:"tutorials/historized-tables",id:"tutorials/historized-tables",title:"Working with historized tables",description:"In some cases, you might have historized tables that store historical data, and you want to query the most recent data by default. However, you might also want to query the data over time or for a specific time period. In this tutorial, we'll show you how to handle historized tables using Veezoo's virtualtable and defaultfilter.",source:"@site/docs/tutorials/historized-tables.md",sourceDirName:"tutorials",slug:"/tutorials/historized-tables",permalink:"/docs/tutorials/historized-tables",draft:!1,tags:[],version:"current",frontMatter:{id:"historized-tables",title:"Working with historized tables"},sidebar:"docs",previous:{title:"Share boards with other users",permalink:"/docs/tutorials/share-boards"},next:{title:"Setting up the semantic layer",permalink:"/docs/tutorials/video-tutorials/setting-up-semantic-layer"}},c={},h=[{value:"Example scenario",id:"example-scenario",level:2},{value:"Step 1: Draft a SQL that adds a flag for the most recent data",id:"step-1-draft-a-sql-that-adds-a-flag-for-the-most-recent-data",level:2},{value:"Step 2: Change our historized_reviews to be a virtual_table",id:"step-2-change-our-historized_reviews-to-be-a-virtual_table",level:2},{value:"Step 3: Add a boolean for the <code>is_most_recent</code> flag",id:"step-3-add-a-boolean-for-the-is_most_recent-flag",level:2},{value:"Step 4: Add a default_filter with a condition",id:"step-4-add-a-default_filter-with-a-condition",level:2}],p={toc:h},m="wrapper";function f(e){var t=e.components,r=(0,n.Z)(e,s);return(0,i.kt)(m,(0,a.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"working-with-historized-tables"},"Working with historized tables"),(0,i.kt)("p",null,"In some cases, you might have historized tables that store historical data, and you want to query the most recent data by default. However, you might also want to query the data over time or for a specific time period. In this tutorial, we'll show you how to handle historized tables using Veezoo's ",(0,i.kt)("inlineCode",{parentName:"p"},"virtual_table")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"default_filter"),"."),(0,i.kt)("h2",{id:"example-scenario"},"Example scenario"),(0,i.kt)("p",null,"Let's consider a historized table named ",(0,i.kt)("inlineCode",{parentName:"p"},"historized_reviews"),' that contains review data for various platforms. By default, you want to query the latest review data, for example, "What\'s our review star rating on Play Store?".'),(0,i.kt)("p",null,'However, you might also want to query the data over time or for a specific time period, such as "How did our review star rating develop over time for Play Store?" or "What was our review score in the second week of Feb 2023 for each platform?".'),(0,i.kt)("h2",{id:"step-1-draft-a-sql-that-adds-a-flag-for-the-most-recent-data"},"Step 1: Draft a SQL that adds a flag for the most recent data"),(0,i.kt)("p",null,"First, you need to create a flag that indicates the most recent data for each platform. You can do this by adding a query with a CTE (Common Table Expression) that ranks the records by the ",(0,i.kt)("inlineCode",{parentName:"p"},"load_timestamp"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},'WITH ranked_records AS (\n    SELECT DISTINCT\n        r."platform" as "platform",\n        r."load_timestamp" as "load_timestamp",\n        r."review_star" as "review_star",\n        ROW_NUMBER() OVER (\n            PARTITION BY r."platform"\n            ORDER BY r."load_timestamp" DESC\n        ) as row_num\n    FROM\n        "your_database"."your_schema"."historized_reviews" r\n)\nSELECT\n    rr."platform",\n    rr."load_timestamp",\n    rr."review_star",\n    CASE\n        WHEN rr.row_num = 1 THEN 1\n        ELSE 0\n    END as is_most_recent\nFROM\n    ranked_records rr\n')),(0,i.kt)("p",null,"This query will have a new column ",(0,i.kt)("inlineCode",{parentName:"p"},"is_most_recent")," that has a value of 1 for the most recent record and 0 for others."),(0,i.kt)("p",null,"Now that you have the flag for the most recent data, you need to set up the logic in Veezoo."),(0,i.kt)("h2",{id:"step-2-change-our-historized_reviews-to-be-a-virtual_table"},"Step 2: Change our historized_reviews to be a virtual_table"),(0,i.kt)("p",null,"First, we will make ",(0,i.kt)("inlineCode",{parentName:"p"},"historized_reviews")," be a ",(0,i.kt)("inlineCode",{parentName:"p"},"virtual_table")," instead, including the new ",(0,i.kt)("inlineCode",{parentName:"p"},"is_most_recent")," flag."),(0,i.kt)("p",null,"To do that you will first need to switch the sidebar in Studio to show the file tree instead:"),(0,i.kt)("img",{alt:"Switch to file tree",width:"250",src:(0,o.Z)("/img/tutorials/historized-tables/01-open-file-tree.png")}),(0,i.kt)("p",null,"Then open the table definition file for the ",(0,i.kt)("inlineCode",{parentName:"p"},"historized_reviews")," table."),(0,i.kt)("img",{alt:"Switch to file tree",width:"250",src:(0,o.Z)("/img/tutorials/historized-tables/02-open-table-file.png")}),(0,i.kt)("p",null,"We will change from this: "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'db.storage.db.your_schema {\n    table historized_reviews {\n        identifier: "historized_reviews"        \n        \n        ...\n    }\n}\n')),(0,i.kt)("p",null,"...to include the ",(0,i.kt)("inlineCode",{parentName:"p"},"virtual_table")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"virtual_table_sql")," instead:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'db.storage.db.your_schema {\n    virtual_table historized_reviews {\n        identifier: "historized_reviews"\n        virtual_table_sql: \n         """\n            WITH ranked_records AS (\n                SELECT DISTINCT\n                    r."platform" as "platform",\n                    r."load_timestamp" as "load_timestamp",\n                    r."review_star" as "review_star",\n                    ROW_NUMBER() OVER (\n                        PARTITION BY r."platform"\n                        ORDER BY r."load_timestamp" DESC\n                    ) as row_num\n                FROM\n                    "your_database"."your_schema"."historized_reviews" r\n            )\n            SELECT\n                rr."platform",\n                rr."load_timestamp",\n                rr."review_star",\n                CASE\n                    WHEN rr.row_num = 1 THEN 1\n                    ELSE 0\n                END as is_most_recent\n            FROM\n                ranked_records rr"""\n        \n        // manually added\n\n        column is_most_recent {\n            identifier: "is_most_recent"\n            primitive_type: "BIT"\n        }\n        \n        ...\n    }\n}\n')),(0,i.kt)("h2",{id:"step-3-add-a-boolean-for-the-is_most_recent-flag"},"Step 3: Add a boolean for the ",(0,i.kt)("inlineCode",{parentName:"h2"},"is_most_recent")," flag"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'kb {\n    class Historized_Reviews {\n        ...\n\n        boolean is_Most_Recent {\n            name: "most recent"\n            sql: "${historized_reviews.is_most_recent}"\n        }\n    }\n}\n')),(0,i.kt)("h2",{id:"step-4-add-a-default_filter-with-a-condition"},"Step 4: Add a default_filter with a condition"),(0,i.kt)("p",null,"Add a ",(0,i.kt)("inlineCode",{parentName:"p"},"default_filter")," with a condition that only applies the filter when the ",(0,i.kt)("inlineCode",{parentName:"p"},"Load_Timestamp")," is not being used in the question:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'kb {\n    class Historized_Reviews {\n        ...\n\n        default_filter: {\n            filter: "this.is_Most_Recent = true"\n            // this means: only use this filter when Load_Timestamp is not being used in the \n            // question (e.g., \'review star over time\' should not use the filter)\n            condition: "@missing { this.Load_Timestamp }"\n        }\n\n        ...\n    }\n}\n')),(0,i.kt)("p",null,'Now, Veezoo will handle historized tables with the most recent data by default. When you ask questions involving time, such as "How did our review star rating develop over time for Play Store?", Veezoo will not use the filter, allowing you to query historical data.'),(0,i.kt)("h1",{id:"best-practice-move-the-sql-to-dbt"},"Best practice: Move the SQL to dbt"),(0,i.kt)("p",null,"As a best practice, we recommend moving the SQL used for the virtual table to dbt. This makes it easier to maintain in the long term. To do this, create a new dbt model for the ",(0,i.kt)("inlineCode",{parentName:"p"},"historized_reviews")," table with the ",(0,i.kt)("inlineCode",{parentName:"p"},"is_most_recent")," flag, and replace the virtual table in Veezoo with a reference to the new table generated by the dbt model."))}f.isMDXComponent=!0}}]);