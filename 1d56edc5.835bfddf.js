(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{64:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return r})),n.d(t,"rightToc",(function(){return b})),n.d(t,"default",(function(){return c}));var a=n(2),l=n(6),i=(n(0),n(92)),o={id:"intro-to-vkl",title:"Veezoo Knowledge Language: Basics",sidebar_label:"Veezoo Knowledge Language",slug:"/intro-to-vkl"},r={unversionedId:"fundamentals/intro-to-vkl",id:"fundamentals/intro-to-vkl",isDocsHomePage:!1,title:"Veezoo Knowledge Language: Basics",description:"What is a Knowledge Graph?",source:"@site/docs/fundamentals/intro-to-vkl.md",slug:"/intro-to-vkl",permalink:"/docs/intro-to-vkl",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/fundamentals/intro-to-vkl.md",version:"current",sidebar_label:"Veezoo Knowledge Language",sidebar:"someSidebar",previous:{title:"Knowledge Graph",permalink:"/docs/"}},b=[{value:"What is a Knowledge Graph?",id:"what-is-a-knowledge-graph",children:[]},{value:"An Example",id:"an-example",children:[]},{value:"Database Layer",id:"database-layer",children:[]},{value:"Knowledge Base Layer",id:"knowledge-base-layer",children:[{value:"Classes and Entities",id:"classes-and-entities",children:[]},{value:"Literal Types",id:"literal-types",children:[]},{value:"Relations",id:"relations",children:[]}]}],s={rightToc:b};function c(e){var t=e.components,n=Object(l.a)(e,["components"]);return Object(i.b)("wrapper",Object(a.a)({},s,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("h2",{id:"what-is-a-knowledge-graph"},"What is a Knowledge Graph?"),Object(i.b)("p",null,"A Knowledge Graph is a version-controlled semantic model of a dataset, which is used by Veezoo to understand your question and generate the correct SQL query that answers it."),Object(i.b)("p",null,"It is represented as a set of files using a modelling language called VKL, the Veezoo Knowledge Language. The Veezoo Knowledge Language is a semantic modelling language that is based on SQL, allowing you to model and document your data in a way that business users and Veezoo can understand."),Object(i.b)("p",null,"Let's go over a simple example to explore the basics of VKL and how you can use it to answer your questions."),Object(i.b)("h2",{id:"an-example"},"An Example"),Object(i.b)("p",null,"Let's say you are a data analyst at Hitchhiker, a small sci-fi movie e-commerce website, and you have the following flat table, called ORDERS."),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"order_id"),Object(i.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"customer_id"),Object(i.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"customer_firstname"),Object(i.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"customer_lastname"),Object(i.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"country"),Object(i.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"movie"),Object(i.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"date"),Object(i.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"returned"))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"1000"),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"1"),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"Till"),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"Haug"),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"CH"),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"The Hitchhiker's Guide to the Galaxy"),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"2020-10-29"),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"yes")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"1001"),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"2"),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"Albert"),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"Einstein"),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"DE"),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"Clockwork Orange"),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"2019-08-09"),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"no")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"1002"),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"1"),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"Till"),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"Haug"),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"CH"),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"2001: A Space Odyssey"),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"2020-10-30"),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"no")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"1003"),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"3"),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"Michael"),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"Jackson"),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"US"),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"Interstellar"),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"2020-09-20"),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"no")))),Object(i.b)("p",null,"You want to make it available to your manager in an easy way, so you can work on some cool prediction models, instead of answering his reporting questions."),Object(i.b)("p",null,"Thankfully, you have Veezoo."),Object(i.b)("p",null,"You open Veezoo, go to Studio and connect it to this flat table on your MySQL database. In 1 click, Studio creates the following Knowledge Graph for you."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{}),"hitchhiker\n\u251c\u2500\u2500 database\n\u2502\xa0\xa0 \u2514\u2500\u2500 mysql\n\u2502\xa0\xa0     \u2514\u2500\u2500 movie_db\n\u2502\xa0\xa0         \u251c\u2500\u2500 database.vkl\n\u2502\xa0\xa0         \u2514\u2500\u2500 ORDERS\n\u2502\xa0\xa0             \u2514\u2500\u2500 table.vkl\n\u2514\u2500\u2500 knowledge-base\n    \u251c\u2500\u2500 classes\n    \u2502\xa0\xa0 \u251c\u2500\u2500 Country\n    \u2502\xa0\xa0 \u2502\xa0\xa0 \u251c\u2500\u2500 class.vkl\n    \u2502\xa0\xa0 \u2502\xa0\xa0 \u2514\u2500\u2500 entities.vkl\n    \u2502\xa0\xa0 \u251c\u2500\u2500 Customer\n    \u2502\xa0\xa0 \u2502\xa0\xa0 \u251c\u2500\u2500 class.vkl\n    \u2502\xa0\xa0 \u2502\xa0\xa0 \u2514\u2500\u2500 entities.vkl\n    \u2502\xa0\xa0 \u251c\u2500\u2500 Movie\n    \u2502\xa0\xa0 \u2502\xa0\xa0 \u251c\u2500\u2500 class.vkl\n    \u2502\xa0\xa0 \u2502\xa0\xa0 \u2514\u2500\u2500 entities.vkl    \n    \u2502\xa0\xa0 \u2514\u2500\u2500 Order\n    \u2502\xa0\xa0     \u2514\u2500\u2500 class.vkl\n    \u2514\u2500\u2500 relations\n        \u251c\u2500\u2500 order_Amount.vkl\n        \u251c\u2500\u2500 order_Country_To.vkl\n        \u251c\u2500\u2500 order_Customer_From.vkl\n        \u251c\u2500\u2500 order_Returned.vkl\n        \u251c\u2500\u2500 order_Date.vkl\n        \u2514\u2500\u2500 order_Movie_Of.vkl\n")),Object(i.b)("p",null,"Now, first of all: ",Object(i.b)("em",{parentName:"p"},"Don't Panic!")," "),Object(i.b)("p",null,"We will explore together the essence of this Knowledge Graph layer-by-layer, so you can get quickly up and running."),Object(i.b)("p",null,"The Knowledge Graph is divided into different layers. We will focus here on the two most important ones: ",Object(i.b)("inlineCode",{parentName:"p"},"knowledge-base")," and ",Object(i.b)("inlineCode",{parentName:"p"},"database")," layers."),Object(i.b)("h2",{id:"database-layer"},"Database Layer"),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"database")," layer (db) is a very thin layer that contains exactly how the data is stored in the underlying database system."),Object(i.b)("p",null,"It involves concepts like:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Schema"),Object(i.b)("li",{parentName:"ul"},"Tables"),Object(i.b)("li",{parentName:"ul"},"Columns"),Object(i.b)("li",{parentName:"ul"},"Primary and foreign keys")),Object(i.b)("p",null,"Here is an example of a table definition in VKL:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{}),'db.postgres {\n    database movie_db {\n        table ORDERS {\n            identifier: "ORDERS"\n            \n            column order_id {\n                primitiveType: "INTEGER"\n                identifier: "order_id"\n                primaryKey: true\n            }\n\n            column customer_id {\n                primitiveType: "INTEGER"\n                identifier: "customer_id"\n            }\n\n            column customer_firstname {\n                primitiveType: "VARCHAR"\n                identifier: "customer_firstname"\n            }\n\n            column customer_lastname {\n                primitiveType: "VARCHAR"\n                identifier: "customer_lastname"\n            }            \n            \n            column country {\n                primitiveType: "VARCHAR"\n                identifier: "country"\n            }\n            \n            column date {\n                primitiveType: "DATE"\n                identifier: "date"\n            }\n            ...\n        }\n    }\n}\n')),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"identifier")," is a SQL identifier, i.e. a column/table/schema/database name."),Object(i.b)("p",null,"Nothing new here. Let's see what's next."),Object(i.b)("h2",{id:"knowledge-base-layer"},"Knowledge Base Layer"),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"knowledge-base")," layer (",Object(i.b)("inlineCode",{parentName:"p"},"kb"),") is where the magic happens. The idea behind the ",Object(i.b)("inlineCode",{parentName:"p"},"kb")," layer is to model your data semantically, i.e. as if you would be explaining to a person what your database is really about."),Object(i.b)("p",null,"For this modelling, we have to introduce a new vocabulary:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Classes"),Object(i.b)("li",{parentName:"ul"},"Entities"),Object(i.b)("li",{parentName:"ul"},"Relations"),Object(i.b)("li",{parentName:"ul"},"Literal types")),Object(i.b)("p",null,"Let's see in detail what each of these things actually mean."),Object(i.b)("h3",{id:"classes-and-entities"},"Classes and Entities"),Object(i.b)("p",null,"If you come from a software background, you may be familiar with the idea of a class as defined in object-oriented programming literature. In some sense, we are making your data more object-oriented.\nSo, a class can be defined as a category of things. The best way to understand it is to go over some examples."),Object(i.b)("p",null,"A class could be something like:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"Customer")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"Country")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"Order")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"Movie"))),Object(i.b)("p",null,'Now, each of these classes may have instantiations of it. In programming, we call these "objects". In VKL, we call them entities.\nSo following our example, we may have entities like:'),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"entity ",Object(i.b)("inlineCode",{parentName:"li"},"Till_Haug")," of class ",Object(i.b)("inlineCode",{parentName:"li"},"Customer")," "),Object(i.b)("li",{parentName:"ul"},"entity ",Object(i.b)("inlineCode",{parentName:"li"},"Brazil")," of class ",Object(i.b)("inlineCode",{parentName:"li"},"Country")),Object(i.b)("li",{parentName:"ul"},"entity ",Object(i.b)("inlineCode",{parentName:"li"},"Batman")," of class ",Object(i.b)("inlineCode",{parentName:"li"},"Movie"))),Object(i.b)("p",null,"But what about ",Object(i.b)("inlineCode",{parentName:"p"},"Order"),"? For classes like ",Object(i.b)("inlineCode",{parentName:"p"},"Order"),", ",Object(i.b)("inlineCode",{parentName:"p"},"Transaction")," and ",Object(i.b)("inlineCode",{parentName:"p"},"Event"),", it makes sense usually to model it as a class without (named) entities. Prefer to use classes with entities when there is a way to refer to an individual of this class, e.g. in a question."),Object(i.b)("h4",{id:"vkl-classes-and-entities"},"VKL: Classes and Entities"),Object(i.b)("p",null,"Let's see how they are defined in VKL."),Object(i.b)("p",null,"File: ",Object(i.b)("em",{parentName:"p"},"hitchhiker/knowledge-base/classes/Customer/class.vkl")),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{}),'kb {\n    class Customer {\n        name.en: "Customer"     \n        synonym.en: ["Client"]\n        refersTo: onto.Customer\n        \n        semanticLink: {\n            entitiesDefinition: {\n                nameSqlPattern.en:\n                    "CONCAT(${ORDERS.customer_firstname}, \' \', ${ORDERS.customer_lastname})"    \n            }\n\n            idSqlPattern: "${ORDERS.customer_id}"\n        }\n    }\n}\n')),Object(i.b)("p",null,"Let's break it down in parts:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"name.en"),": The name of the class in the specified language (",Object(i.b)("inlineCode",{parentName:"li"},"en")," for English). This is the primary way to refer to this concept in a question and what gets displayed to the user in an answer."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"synonym.en"),': Synonyms specify alternative ways to refer to this concept in a question. In our example, we can say "how many customers", but also "how many clients" and it will mean the same.'),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"refersTo"),": By using this optional attribute, you can point your class to a pre-defined ontology class and inherit labels and other functionalities from it. Studio already does this automatically to the best of its knowledge. To find out more about ontologies, check ","[Ontologies]",".")),Object(i.b)("p",null,"And then we get to the glue between the ",Object(i.b)("inlineCode",{parentName:"p"},"knowledge-base")," layer and the ",Object(i.b)("inlineCode",{parentName:"p"},"database")," layer, namely the Semantic Link. "),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"idSqlPattern"),": Specifies in a SQL-like format how to uniquely identify an entity of this class in the database. Usually this is a key. In our example, this would be the ",Object(i.b)("inlineCode",{parentName:"li"},"customer_id")," for the customer class. For the class ",Object(i.b)("inlineCode",{parentName:"li"},"Order"),", we still define an ",Object(i.b)("inlineCode",{parentName:"li"},"idSqlPattern"),", even though we won't specify ",Object(i.b)("inlineCode",{parentName:"li"},"entitiesDefinition"),"."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"entitiesDefinition"),": This block defines how entities will be generated for the given class.",Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"nameSqlPattern.en"),": Specifies in a SQL-like format how to generate the name for the entities of this class. In our example, this would be by concatenating the first name and the last name in SQL."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"synonymSqlPattern.en")," (optional): Specifies in a SQL-like format how to generate alternative ways to refer to the entities.")))),Object(i.b)("p",null,"File: ",Object(i.b)("em",{parentName:"p"},"hitchhiker/knowledge-base/classes/Customer/entities.vkl")),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{}),'kb {\n    class Customer {\n        entity Till_Haug {          \n            name.en: "Till Haug"  // automatically generated\n\n            synonym.en: ["Tillio", "Mr. Haug"]  // manually added\n\n            sqlId: "1"  // automatically generated\n        }\n\n        ...\n    }\n}\n')),Object(i.b)("p",null,"As you can see here, we have ",Object(i.b)("inlineCode",{parentName:"p"},"name")," and ",Object(i.b)("inlineCode",{parentName:"p"},"sqlId")," automatically generated based on our definition in the class' ",Object(i.b)("inlineCode",{parentName:"p"},"semanticLink"),". You can freely add new synonyms over labels or adapt the ",Object(i.b)("inlineCode",{parentName:"p"},"name")," and see the effect straight away in Veezoo."),Object(i.b)("h3",{id:"literal-types"},"Literal Types"),Object(i.b)("p",null,"Literal types are your usual data types like: ",Object(i.b)("inlineCode",{parentName:"p"},"Double"),", ",Object(i.b)("inlineCode",{parentName:"p"},"Integer"),", ",Object(i.b)("inlineCode",{parentName:"p"},"Date"),", ",Object(i.b)("inlineCode",{parentName:"p"},"Boolean")," and ",Object(i.b)("inlineCode",{parentName:"p"},"String"),"."),Object(i.b)("h3",{id:"relations"},"Relations"),Object(i.b)("p",null,"A relation in VKL describes how classes and other classes or literal types relate to each other. "),Object(i.b)("p",null,"Example:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"Till_Haug")," ",Object(i.b)("em",{parentName:"li"},"works at")," ",Object(i.b)("inlineCode",{parentName:"li"},"Veezoo_AG")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"JP_Monteiro")," ",Object(i.b)("em",{parentName:"li"},"was born on")," ",Object(i.b)("inlineCode",{parentName:"li"},"30th of March 1993")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"Brazil")," ",Object(i.b)("em",{parentName:"li"},"has a population of")," ",Object(i.b)("inlineCode",{parentName:"li"},"209'500'000"))),Object(i.b)("p",null,"In other words, we have the following relations:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"works_at")," is a relation that goes from ",Object(i.b)("inlineCode",{parentName:"li"},"Employee")," to ",Object(i.b)("inlineCode",{parentName:"li"},"Company")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"birthdate")," is a relation that goes from ",Object(i.b)("inlineCode",{parentName:"li"},"Person")," to the literal type ",Object(i.b)("inlineCode",{parentName:"li"},"Date")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"population")," is a relation that goes from ",Object(i.b)("inlineCode",{parentName:"li"},"Country")," to the literal type ",Object(i.b)("inlineCode",{parentName:"li"},"Integer"))),Object(i.b)("h4",{id:"vkl-relations"},"VKL: Relations"),Object(i.b)("p",null,"Let's look now at our movie e-commerce example."),Object(i.b)("p",null,"These are the relations created by Veezoo:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{})," ...\n    \u2514\u2500\u2500 relations\n        \u251c\u2500\u2500 order_Amount.vkl\n        \u251c\u2500\u2500 order_Country_To.vkl\n        \u251c\u2500\u2500 order_Customer_From.vkl\n        \u251c\u2500\u2500 order_Returned.vkl\n        \u251c\u2500\u2500 order_Date.vkl\n        \u2514\u2500\u2500 order_Movie_Of.vkl\n")),Object(i.b)("p",null,"Relations, as we have seen, are binary and can be between:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"class")," and ",Object(i.b)("inlineCode",{parentName:"li"},"class")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"class")," and a literal type (",Object(i.b)("inlineCode",{parentName:"li"},"Date"),", ",Object(i.b)("inlineCode",{parentName:"li"},"Boolean"),", ",Object(i.b)("inlineCode",{parentName:"li"},"Integer"),", ",Object(i.b)("inlineCode",{parentName:"li"},"Double"),")")),Object(i.b)("p",null,"In general, the syntax is the same, but we will analyze them individually."),Object(i.b)("h5",{id:"relation-class---class"},"Relation: Class -> Class"),Object(i.b)("p",null,"Let's take the relation between ",Object(i.b)("inlineCode",{parentName:"p"},"Order")," and ",Object(i.b)("inlineCode",{parentName:"p"},"Customer"),"."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{}),'kb {\n    relation order_Customer_From {\n        displayName.en: "from"\n\n        from: kb.Order\n        to: kb.Customer\n\n        semanticLink: {\n            from_sql: "${ORDERS.order_id}"\n            to_sql: "${ORDERS.customer_id}"\n        }\n        \n        tag: KB_Many2One\n    }\n}\n')),Object(i.b)("p",null,"These are the properties we have defined:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"displayName.en"),': This specifies how this relation gets displayed to the user in an answer, but is not used to refer to it in a question. In our example, we don\'t want the word "from" to be always taken to mean this relation in a question, so we specify it as a ',Object(i.b)("inlineCode",{parentName:"li"},"displayName"),", instead of a ",Object(i.b)("inlineCode",{parentName:"li"},"name"),"."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"from")," and ",Object(i.b)("inlineCode",{parentName:"li"},"to"),": This relation connects the class specified in ",Object(i.b)("inlineCode",{parentName:"li"},"from")," with the one in ",Object(i.b)("inlineCode",{parentName:"li"},"to"),"."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"semanticLink"),": Defines how the relation is translated to SQL.",Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"from_sql")," and ",Object(i.b)("inlineCode",{parentName:"li"},"to_sql"),": Specifies where the classes in ",Object(i.b)("inlineCode",{parentName:"li"},"from")," and ",Object(i.b)("inlineCode",{parentName:"li"},"to")," can be found for this relation, more specifically their ",Object(i.b)("inlineCode",{parentName:"li"},"id"),"s. In our example, ",Object(i.b)("inlineCode",{parentName:"li"},"ORDERS.customer_id")," uniquely refers to the class ",Object(i.b)("inlineCode",{parentName:"li"},"Customer"),". This is the case even if it would just be a foreign key to another ",Object(i.b)("inlineCode",{parentName:"li"},"CUSTOMERS")," table."))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"tag"),": Tags allow you to add additional information about a concept. For relation, we add always its cardinality, i.e. how many of ",Object(i.b)("inlineCode",{parentName:"li"},"from")," relate to how many of ",Object(i.b)("inlineCode",{parentName:"li"},"to"),". In our example, each customer can have multiple orders, but one order is assigned to one customer. This means: ",Object(i.b)("inlineCode",{parentName:"li"},"Order")," N--1 ",Object(i.b)("inlineCode",{parentName:"li"},"Customer"),", therefore ",Object(i.b)("inlineCode",{parentName:"li"},"KB_Many2One"),".")),Object(i.b)("h5",{id:"relation-class---literal"},"Relation: Class -> Literal"),Object(i.b)("p",null,"Now we will explore the other kinds of relations with literals: ",Object(i.b)("inlineCode",{parentName:"p"},"Double"),", ",Object(i.b)("inlineCode",{parentName:"p"},"Boolean"),", ",Object(i.b)("inlineCode",{parentName:"p"},"Date")," and ",Object(i.b)("inlineCode",{parentName:"p"},"String"),"."),Object(i.b)("p",null,"File: ",Object(i.b)("em",{parentName:"p"},"hitchhiker/knowledge-base/relations/order_Amount.vkl")),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{}),'kb {\n    relation order_Amount {\n        name.en: "Amount"\n        synonym.en: ["Price", "Revenue"]\n\n        from: kb.Order\n        to: Double\n\n        unit: onto.Unit.Currency.USD\n\n        semanticLink: {\n            from_sql: "${ORDERS.order_id}"\n            to_sql: "${ORDERS.amount}"\n        }\n        \n        tag: KB_Many2One\n    }\n}\n')),Object(i.b)("p",null,"Notice the ",Object(i.b)("inlineCode",{parentName:"p"},"unit")," parameter, which allows Veezoo to display the value in the appropriate format to the user."),Object(i.b)("p",null,"File: ",Object(i.b)("em",{parentName:"p"},"hitchhiker/knowledge-base/relations/order_Date.vkl")),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{}),'kb {\n    relation order_Date {\n        name.en: "Date"\n\n        from: kb.Order\n        to: Date\n\n        dateTimeFormat: DayFormat\n\n        semanticLink: {\n            from_sql: "${ORDERS.order_id}"\n            to_sql: "${ORDERS.date}"\n        }\n        \n        tag: KB_Many2One\n    }\n}\n')),Object(i.b)("p",null,"For Date relations, it is required to specify the granularity by setting ",Object(i.b)("inlineCode",{parentName:"p"},"dateTimeFormat"),". Also, Veezoo assumes that the ",Object(i.b)("inlineCode",{parentName:"p"},"to_sql")," is a SQL date/datetime expression. This means that in case it is not, you should change ",Object(i.b)("inlineCode",{parentName:"p"},"to_sql")," to be a casting operation in your SQL dialect, e.g. ",Object(i.b)("inlineCode",{parentName:"p"},"to_sql: \"TO_DATE(${ORDERS.date_str}, 'YYYYMMDD')\"")," or directly in your database."),Object(i.b)("p",null,"File: ",Object(i.b)("em",{parentName:"p"},"hitchhiker/knowledge-base/relations/order_Returned.vkl")),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{}),'kb {\n    relation order_Returned {\n        name.en: "Returned"\n\n        from: kb.Order\n        to: Boolean\n\n        semanticLink: {\n            from_sql: "${ORDERS.order_id}"\n            to_sql: "${ORDERS.returned} = \'yes\'"\n        }\n        \n        tag: KB_Many2One\n    }\n}\n')),Object(i.b)("p",null,"For Boolean relations, the ",Object(i.b)("inlineCode",{parentName:"p"},"to_sql")," is any kind of SQL boolean expression."),Object(i.b)("p",null,"In our example, we didn't have any ",Object(i.b)("inlineCode",{parentName:"p"},"String")," relations, but let's say we would have a column in our database for ",Object(i.b)("inlineCode",{parentName:"p"},"returned_comment"),", so whenever customers return an order, they can specify why in free-text. In this case, it is not natural to model it as a class with entities. A comment doesn't have a name for you to refer to it in a question. But still you may want to explore its contents. "),Object(i.b)("p",null,"This is how we would model it in the Knowledge Graph:"),Object(i.b)("p",null,"File: ",Object(i.b)("em",{parentName:"p"},"hitchhiker/knowledge-base/relations/order_Comment.vkl")),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{}),'kb {\n    relation order_Comment {\n        name.en: "Comment"\n        synonym.en: ["Returned Comment", "Complaint", "Feedback"]\n\n        from: kb.Order\n        to: String\n\n        semanticLink: {\n            from_sql: "${ORDERS.order_id}"\n            to_sql: "${ORDERS.returned_comment}"\n        }\n        \n        tag: KB_Many2One\n    }\n}\n')),Object(i.b)("p",null,"That's it. Like this, you can ask questions involving text search operations, e.g. \"how many customers complained about 'damaged' orders last week?\"."))}c.isMDXComponent=!0}}]);