(window.webpackJsonp=window.webpackJsonp||[]).push([[37],{109:function(e,n,t){"use strict";t.d(n,"a",(function(){return u})),t.d(n,"b",(function(){return m}));var a=t(0),i=t.n(a);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var c=i.a.createContext({}),b=function(e){var n=i.a.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},u=function(e){var n=b(e.components);return i.a.createElement(c.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return i.a.createElement(i.a.Fragment,{},n)}},d=i.a.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=b(t),d=a,m=u["".concat(l,".").concat(d)]||u[d]||p[d]||o;return t?i.a.createElement(m,r(r({ref:n},c),{},{components:t})):i.a.createElement(m,r({ref:n},c))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,l=new Array(o);l[0]=d;var r={};for(var s in n)hasOwnProperty.call(n,s)&&(r[s]=n[s]);r.originalType=e,r.mdxType="string"==typeof e?e:a,l[1]=r;for(var c=2;c<o;c++)l[c]=t[c];return i.a.createElement.apply(null,l)}return i.a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},97:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return l})),t.d(n,"metadata",(function(){return r})),t.d(n,"rightToc",(function(){return s})),t.d(n,"default",(function(){return b}));var a=t(2),i=t(6),o=(t(0),t(109)),l={},r={unversionedId:"reference/kb-layer/attribute/class",id:"reference/kb-layer/attribute/class",isDocsHomePage:!1,title:"class",description:"Definition",source:"@site/docs/reference/kb-layer/attribute/class.md",slug:"/reference/kb-layer/attribute/class",permalink:"/docs/reference/kb-layer/attribute/class",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/reference/kb-layer/attribute/class.md",version:"current",sidebar:"docs",previous:{title:"boolean",permalink:"/docs/reference/kb-layer/attribute/boolean"},next:{title:"string",permalink:"/docs/reference/kb-layer/attribute/string"}},s=[{value:"Definition",id:"definition",children:[]},{value:"Example",id:"example",children:[{value:"Normalizing your KG",id:"normalizing-your-kg",children:[]}]},{value:"When should I model something as a string vs. a class?",id:"when-should-i-model-something-as-a-string-vs-a-class",children:[]},{value:"Advanced Class Definition",id:"advanced-class-definition",children:[]}],c={rightToc:s};function b(e){var n=e.components,t=Object(i.a)(e,["components"]);return Object(o.b)("wrapper",Object(a.a)({},c,t,{components:n,mdxType:"MDXLayout"}),Object(o.b)("h2",{id:"definition"},"Definition"),Object(o.b)("p",null,"A class can be an attribute of another class. Like its ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/reference/kb-layer/class/class"}),"outer class"),", it is also a category of things."),Object(o.b)("p",null,"The main difference is that, as an attribute, it doesn't contain much more information and therefore doesn't \"deserve\" to be modelled more prominently in a separate file."),Object(o.b)("p",null,"Let's take a look at an example to understand it better and explain the difference between a ",Object(o.b)("inlineCode",{parentName:"p"},"string")," and a ",Object(o.b)("inlineCode",{parentName:"p"},"class"),"."),Object(o.b)("h2",{id:"example"},"Example"),Object(o.b)("p",null,"Let's say we have a dataset with a table ",Object(o.b)("inlineCode",{parentName:"p"},"CITY(id, name, lat, long, country)"),", where ",Object(o.b)("inlineCode",{parentName:"p"},"country")," is just a text column containing the name of the country the city is in."),Object(o.b)("p",null,"In ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://en.wikipedia.org/wiki/Entity%E2%80%93relationship_model"}),"ER-modelling"),", you would choose to model City as an entity type, but Country would simply be a string attribute of City. That's because we don't have any other information about it, e.g. population, continent, etc."),Object(o.b)("p",null,"Now let's say suddenly the data model changes, because the needs of the business changes, and this information is there:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"CITY(id, name, lat, long, country_id)")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"COUNTRY(id, name, population, gdp_in_usd, continent)"),". ")),Object(o.b)("p",null,"The ER model would have, instead of a string attribute ",Object(o.b)("inlineCode",{parentName:"p"},"country"),", an entity type Country."),Object(o.b)("p",null,"Now, in Veezoo, we believe that the knowledge-base layer should"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"model the reality as closely as possible: a Country is not a String"),Object(o.b)("li",{parentName:"ul"},"be as independent as possible from the underlying physical representation of the data: who cares if a country is in a column or a separate table")),Object(o.b)("p",null,"So Country, in the first example is a class (not a string) and in the second example it's still a class."),Object(o.b)("p",null,"Here is in VKL for the first example:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'kb {\n\n    class City {\n        name.en: "City"\n        sql: "${CITY.id}"\n\n        ...\n\n        class Country {\n            name.en: "Country"\n            extends: onto.Country\n\n            sql: "${CITY.country}"\n        }\n\n    }\n}\n')),Object(o.b)("p",null,"And after we extended the data model:"),Object(o.b)("p",null,"File: ",Object(o.b)("em",{parentName:"p"},"knowledge-base/classes/City.vkl")),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'kb {\n\n    class City {\n        name.en: "City"\n        sql: "${CITY.id}"\n\n        ...\n\n        relationship located_in {\n            display_name.en: "located in"\n\n            to: kb.Country\n            sql: "${CITY.country_id}"\n        }\n    }\n}\n')),Object(o.b)("p",null,"File: ",Object(o.b)("em",{parentName:"p"},"knowledge-base/classes/Country.vkl")),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'kb {\n\n    class Country {\n        name.en: "Country"\n        extends: onto.Country\n\n        sql: "${COUNTRY.id}"\n        name_sql: "${COUNTRY.name}"\n\n        ...\n    }\n}\n')),Object(o.b)("p",null,"Now you may have noticed that Country is still a class, but in a different file and with a different ",Object(o.b)("inlineCode",{parentName:"p"},"sql"),"/",Object(o.b)("inlineCode",{parentName:"p"},"name_sql")," mapping."),Object(o.b)("p",null,"Apart from this, there is now a ",Object(o.b)("inlineCode",{parentName:"p"},"relationship")," defined that goes from ",Object(o.b)("inlineCode",{parentName:"p"},"kb.City")," ",Object(o.b)("strong",{parentName:"p"},"to")," ",Object(o.b)("inlineCode",{parentName:"p"},"kb.Country"),"."),Object(o.b)("p",null,"\"Didn't you say that the knowledge-base layer wouldn't change? Why is there now a relationship?\""),Object(o.b)("p",null,'The truth is that a class defined as an attribute is just a "syntactic sugar" for a class + a relationship. In fact, if you want you can even modify its properties, e.g. ',Object(o.b)("inlineCode",{parentName:"p"},"display_name"),", like this:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'kb {\n\n    class City {\n        name.en: "City"\n        sql: "${CITY.id}"\n\n        ...\n\n        class Country {\n            name.en: "Country"\n            extends: onto.Country\n\n            // defined inside the class attribute itself without an identifier\n            relationship {\n                // here you can override any relationship attribute,\n                // e.g. display_name from its default value "with" to something better like \'located in\'\n                display_name.en: "located in"\n\n                // no sql defined here (Don\'t-Repeat-Yourself principle)\n            }\n\n            sql: "${CITY.country}"\n        }\n\n    }\n}\n')),Object(o.b)("h3",{id:"normalizing-your-kg"},"Normalizing your KG"),Object(o.b)("p",null,"What if you have ",Object(o.b)("inlineCode",{parentName:"p"},"country")," in many tables:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"CITY(id, name, country)")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"CUSTOMER(id, name, country)"))),Object(o.b)("p",null,"and you want a single class representing Country, even if your database doesn't have a table for it."),Object(o.b)("p",null,"Using what we just learned above, we can extract the class attribute ",Object(o.b)("inlineCode",{parentName:"p"},"class Country")," from the ",Object(o.b)("inlineCode",{parentName:"p"},"class City")," into another separate file (click on the icon in Studio Editor to add a new file and then select type Class.)"),Object(o.b)("p",null,"Now you can copy the definition and put it in this new file."),Object(o.b)("p",null,"File: ",Object(o.b)("em",{parentName:"p"},"knowledge-base/classes/Country.vkl")),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'kb {\n\n    class Country {\n        name.en: "Country"\n        extends: onto.Country\n\n        sql: "${CITY.country}"\n    }\n}\n')),Object(o.b)("p",null,"And then substitute the ",Object(o.b)("inlineCode",{parentName:"p"},"class Country")," in the other classes (City and Customer) with a relationship."),Object(o.b)("p",null,"File: ",Object(o.b)("em",{parentName:"p"},"knowledge-base/classes/City.vkl")),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'kb {\n\n    class City {\n        name.en: "City"\n        sql: "${CITY.id}"\n\n        ...\n\n        relationship located_in {\n            display_name.en: "located in"\n\n            to: kb.Country\n            \n            // defaults to the sql of the kb.Country class (DRY principle)\n        }\n    }\n}\n')),Object(o.b)("p",null,"File: ",Object(o.b)("em",{parentName:"p"},"knowledge-base/classes/Customer.vkl")),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'kb {\n\n    class Customer {\n        name.en: "Customer"\n        sql: "${CUSTOMER.id}"\n\n        ...\n\n        relationship lives_in {\n            display_name.en: "lives in"\n\n            to: kb.Country\n            \n            sql: "${CUSTOMER.country}"\n        }\n    }\n}\n')),Object(o.b)("p",null,"It is important to notice that Veezoo will not try to join the two tables, since it is not needed."),Object(o.b)("h2",{id:"when-should-i-model-something-as-a-string-vs-a-class"},"When should I model something as a string vs. a class?"),Object(o.b)("p",null,"This is a common question that arises when you first learn VKL. In all other BI tools, a country is just a string."),Object(o.b)("p",null,"Well, the way you have to think about it is: is it actual text (e.g. that you would want to search inside)? If not, it's probably a class."),Object(o.b)("p",null,"A free-text comment field? It's a string in Veezoo."),Object(o.b)("p",null,"A customer? It's a class."),Object(o.b)("p",null,"The first name of a customer? If this is relevant as a standalone concept for your business users, then sure, it's a string. Otherwise, just use it as part of the ",Object(o.b)("inlineCode",{parentName:"p"},"name_sql"),", e.g. ",Object(o.b)("inlineCode",{parentName:"p"},"\"${CUSTOMER.first_name} || ' ' || ${CUSTOMER.last_name}\""),"."),Object(o.b)("p",null,"By modelling as a class with entities, you get to refer to the individual values (entities) in a question, since Veezoo will index them to understand you. This way you can ask 'How many Corporate customers do we have?' and Veezoo will recognize the entity 'Corporate' of class 'Segment', while helping you with AutoComplete."),Object(o.b)("h2",{id:"advanced-class-definition"},"Advanced Class Definition"),Object(o.b)("p",null,"Like with other attributes, we can use the ",Object(o.b)("inlineCode",{parentName:"p"},"sql")," property to define whatever we can express in SQL."),Object(o.b)("p",null,"For instance, let's say we have a table ",Object(o.b)("inlineCode",{parentName:"p"},"COUNTRY(id, name, population)")," and we want to segment countries according to their population."),Object(o.b)("p",null,"We can define a class attribute ",Object(o.b)("inlineCode",{parentName:"p"},"Population_Group")," like this:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'kb {\n\n    class Country {\n        name.en: "Country"\n\n        ...\n\n        integer Population {\n            name.en: "Population"\n\n            sql: "${COUNTRY.population}"\n        }\n\n\n        // our new segmentation\n        class Population_Group {\n            name.en: "Population Group"\n            synonym.en: "Size"\n            description.en: "A segmentation of countries according to their population."\n\n            sql: """\n                CASE\n                  WHEN ${kb.Country.Population} < 100000 THEN \'Very Small\'\n                  WHEN ${kb.Country.Population} < 1000000 THEN \'Small\'\n                  WHEN ${kb.Country.Population} < 10000000 THEN \'Medium\'\n                  WHEN ${kb.Country.Population} < 100000000 THEN \'Big\'  \n                  ELSE \'Very Big\'\n                END\n            """\n        }\n    }\n\n}\n')),Object(o.b)("p",null,"Once this is defined and saved, you can click on the Sync button in the Editor and it will generate the entities for the ",Object(o.b)("inlineCode",{parentName:"p"},"Population_Group"),' class.\nNow you can ask questions like "How many countries are there in each population group?" or "Show me all small countries."'))}b.isMDXComponent=!0}}]);