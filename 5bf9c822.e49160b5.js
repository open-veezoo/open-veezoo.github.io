(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{108:function(e,n,t){"use strict";t.d(n,"a",(function(){return b})),t.d(n,"b",(function(){return m}));var r=t(0),o=t.n(r);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=o.a.createContext({}),p=function(e){var n=o.a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):c(c({},n),e)),t},b=function(e){var n=p(e.components);return o.a.createElement(s.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return o.a.createElement(o.a.Fragment,{},n)}},d=o.a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,i=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),b=p(t),d=r,m=b["".concat(i,".").concat(d)]||b[d]||u[d]||a;return t?o.a.createElement(m,c(c({ref:n},s),{},{components:t})):o.a.createElement(m,c({ref:n},s))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,i=new Array(a);i[0]=d;var c={};for(var l in n)hasOwnProperty.call(n,l)&&(c[l]=n[l]);c.originalType=e,c.mdxType="string"==typeof e?e:r,i[1]=c;for(var s=2;s<a;s++)i[s]=t[s];return o.a.createElement.apply(null,i)}return o.a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},71:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return a})),t.d(n,"metadata",(function(){return i})),t.d(n,"rightToc",(function(){return c})),t.d(n,"default",(function(){return s}));var r=t(2),o=(t(0),t(108));const a={},i={unversionedId:"reference/kb-layer/relationship/sql",id:"reference/kb-layer/relationship/sql",isDocsHomePage:!1,title:"sql",description:"Definition",source:"@site/docs/reference/kb-layer/relationship/sql.md",slug:"/reference/kb-layer/relationship/sql",permalink:"/docs/reference/kb-layer/relationship/sql",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/reference/kb-layer/relationship/sql.md",version:"current",sidebar:"docs",previous:{title:"to",permalink:"/docs/reference/kb-layer/relationship/to"},next:{title:"What is an attribute?",permalink:"/docs/reference/kb-layer/attribute"}},c=[{value:"Definition",id:"definition",children:[]},{value:"Usage",id:"usage",children:[]}],l={rightToc:c};function s({components:e,...n}){return Object(o.b)("wrapper",Object(r.a)({},l,n,{components:e,mdxType:"MDXLayout"}),Object(o.b)("h2",{id:"definition"},"Definition"),Object(o.b)("p",null,"A relationship in VKL describes how classes relate to each other."),Object(o.b)("p",null,"The ",Object(o.b)("inlineCode",{parentName:"p"},"sql")," property specifies how these classes connect to each other in the database. These are usually foreign keys in your database."),Object(o.b)("h2",{id:"usage"},"Usage"),Object(o.b)("p",null,"Let's say we have the following tables: ",Object(o.b)("inlineCode",{parentName:"p"},"CUSTOMER(id, name)")," and ",Object(o.b)("inlineCode",{parentName:"p"},"ORDER(id, customer_id, total_order)"),"."),Object(o.b)("p",null,"In this case of Foreign Keys, the ",Object(o.b)("inlineCode",{parentName:"p"},"sql")," of the connecting classes (e.g. ",Object(o.b)("inlineCode",{parentName:"p"},"kb.Order")," and ",Object(o.b)("inlineCode",{parentName:"p"},"kb.Customer"),") are not both in the same table."),Object(o.b)("p",null,"Now, ",Object(o.b)("inlineCode",{parentName:"p"},"customer_id")," is a foreign key pointing to the ",Object(o.b)("inlineCode",{parentName:"p"},"CUSTOMER")," table. This is how our new classes and relationship will look like."),Object(o.b)("p",null,"File: ",Object(o.b)("em",{parentName:"p"},"hitchhiker/knowledge-base/classes/Customer.vkl")),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-json"}),'import: [\n    db.postgres.movie_db.public.CUSTOMER\n]\n\nkb {\n\n    class Customer {\n        name.en: "Customer"\n\n        sql: "${CUSTOMER.id}"\n        name_sql: "${CUSTOMER.name}"\n    }\n}\n')),Object(o.b)("p",null,"File: ",Object(o.b)("em",{parentName:"p"},"hitchhiker/knowledge-base/classes/Order.vkl")),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-json"}),'import: [\n    db.postgres.movie_db.public.ORDER\n]\n\nkb {\n\n    class Order {\n        name.en: "Order"\n        sql: "${ORDER.id}"\n\n        relationship from_Customer {\n            to: kb.Customer\n            sql: "${ORDER.customer_id}"\n        }\n\n        ...\n    }\n}\n')),Object(o.b)("p",null,"The relationship ",Object(o.b)("inlineCode",{parentName:"p"},"from_Customer")," has a ",Object(o.b)("inlineCode",{parentName:"p"},"sql")," defined that uses the foreign key column ",Object(o.b)("inlineCode",{parentName:"p"},"customer_id"),". Since the ",Object(o.b)("inlineCode",{parentName:"p"},"to")," is set to ",Object(o.b)("inlineCode",{parentName:"p"},"kb.Customer"),", Veezoo can now correctly do the join using the ",Object(o.b)("inlineCode",{parentName:"p"},"sql")," from the relationship and the ",Object(o.b)("inlineCode",{parentName:"p"},"sql")," from the referenced class ",Object(o.b)("inlineCode",{parentName:"p"},"kb.Customer"),", like this: ",Object(o.b)("inlineCode",{parentName:"p"},"${ORDER.customer_id} = ${CUSTOMER.id}"),"."),Object(o.b)("p",null,"Keep in mind that ",Object(o.b)("inlineCode",{parentName:"p"},"sql"),' accepts any kind of SQL expression (e.g. concatenation of multiple columns) and therefore the join does not need to be of the type "column A = column B".\nFor joins that need to go over multiple tables or have a more advanced SQL expression, refer to ',Object(o.b)("a",Object(r.a)({parentName:"p"},{href:"/docs/reference/kb-layer/general/join"}),"join"),"."))}s.isMDXComponent=!0}}]);