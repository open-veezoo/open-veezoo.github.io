(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{109:function(e,t,n){"use strict";n.d(t,"a",(function(){return d})),n.d(t,"b",(function(){return f}));var r=n(0),a=n.n(r);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var u=a.a.createContext({}),p=function(e){var t=a.a.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},d=function(e){var t=p(e.components);return a.a.createElement(u.Provider,{value:t},e.children)},l={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},b=a.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),d=p(n),b=r,f=d["".concat(s,".").concat(b)]||d[b]||l[b]||o;return n?a.a.createElement(f,c(c({ref:t},u),{},{components:n})):a.a.createElement(f,c({ref:t},u))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,s=new Array(o);s[0]=b;var c={};for(var i in t)hasOwnProperty.call(t,i)&&(c[i]=t[i]);c.originalType=e,c.mdxType="string"==typeof e?e:r,s[1]=c;for(var u=2;u<o;u++)s[u]=n[u];return a.a.createElement.apply(null,s)}return a.a.createElement.apply(null,n)}b.displayName="MDXCreateElement"},78:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return s})),n.d(t,"metadata",(function(){return c})),n.d(t,"rightToc",(function(){return i})),n.d(t,"default",(function(){return p}));var r=n(2),a=n(6),o=(n(0),n(109)),s={id:"understand-questions",title:"Get Veezoo to Understand Your Questions",sidebar_label:"Get Veezoo to Understand Your Questions",slug:"/recipes/understand-questions"},c={unversionedId:"recipes/understand-questions",id:"recipes/understand-questions",isDocsHomePage:!1,title:"Get Veezoo to Understand Your Questions",description:"synonym: I want to say 'NYC', instead of 'New York City'",source:"@site/docs/recipes/understand-questions.md",slug:"/recipes/understand-questions",permalink:"/docs/recipes/understand-questions",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/recipes/understand-questions.md",version:"current",sidebar_label:"Get Veezoo to Understand Your Questions",sidebar:"docs",previous:{title:"Knowledge Base Layer",permalink:"/docs/kb-layer"},next:{title:"Help Business Users Understand Your Data",permalink:"/docs/recipes/understand-data"}},i=[],u={rightToc:i};function p(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(o.b)("wrapper",Object(r.a)({},u,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,Object(o.b)("a",Object(r.a)({parentName:"p"},{href:"/docs/reference/kb-layer/general/synonym"}),"synonym"),": I want to say 'NYC', instead of 'New York City'"),Object(o.b)("p",null,Object(o.b)("a",Object(r.a)({parentName:"p"},{href:"/docs/reference/kb-layer/class/default_date"}),"default_date"),": If I say 2018, I mean Order Date in 2018"),Object(o.b)("p",null,Object(o.b)("a",Object(r.a)({parentName:"p"},{href:"/docs/reference/kb-layer/class/default_order"}),"default_order"),": If I say 'top 10 orders', I mean 'top 10 orders by profit'"),Object(o.b)("p",null,Object(o.b)("a",Object(r.a)({parentName:"p"},{href:"/docs/reference/ontology/person"}),"onto.Person"),": I want to say 'who' and see 'customers'"),Object(o.b)("p",null,Object(o.b)("a",Object(r.a)({parentName:"p"},{href:"/docs/reference/ontology/location"}),"onto.Location"),": I want to say 'where' and see 'countries'"),Object(o.b)("p",null,Object(o.b)("a",Object(r.a)({parentName:"p"},{href:"/docs/reference/ontology/location"}),"onto.Birthdate"),": I want to ask about 'birthdays next week' based on a Birthdate column"),Object(o.b)("p",null,Object(o.b)("a",Object(r.a)({parentName:"p"},{href:"/docs/reference/kb-layer/class/creation_date"}),"creation_date"),": I want to ask about the age of something based on a date"),Object(o.b)("p",null,Object(o.b)("a",Object(r.a)({parentName:"p"},{href:"."}),"default_aggregation"),": When I say 'temperature per year', I want the average temperature per year, not the sum"),Object(o.b)("p",null,Object(o.b)("a",Object(r.a)({parentName:"p"},{href:"."}),"KB_Union"),": I want to say Nordic Countries and see only Norway, Sweden, etc."),Object(o.b)("p",null,Object(o.b)("a",Object(r.a)({parentName:"p"},{href:"."}),"KB_LowLinkingPriority"),": I want Veezoo to always prefer the state of New York instead of the city of New York when I say 'New York'"))}p.isMDXComponent=!0}}]);