(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{71:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return o})),a.d(t,"metadata",(function(){return r})),a.d(t,"rightToc",(function(){return s})),a.d(t,"default",(function(){return c}));var n=a(2),i=a(6),l=(a(0),a(92)),o={id:"intro-to-kg",title:"Knowledge Graph",sidebar_label:"Knowledge Graph",slug:"/"},r={unversionedId:"fundamentals/intro-to-kg",id:"fundamentals/intro-to-kg",isDocsHomePage:!1,title:"Knowledge Graph",description:"What is a Knowledge Graph?",source:"@site/docs/fundamentals/intro-to-kg.md",slug:"/",permalink:"/docs/",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/fundamentals/intro-to-kg.md",version:"current",sidebar_label:"Knowledge Graph",sidebar:"someSidebar",next:{title:"Veezoo Knowledge Language: Basics",permalink:"/docs/intro-to-vkl"}},s=[{value:"What is a Knowledge Graph?",id:"what-is-a-knowledge-graph",children:[]},{value:"Database Layer",id:"database-layer",children:[]},{value:"Knowledge Base Layer",id:"knowledge-base-layer",children:[{value:"Classes and Entities",id:"classes-and-entities",children:[]},{value:"Literal Types",id:"literal-types",children:[]},{value:"Relations",id:"relations",children:[]}]}],b={rightToc:s};function c(e){var t=e.components,a=Object(i.a)(e,["components"]);return Object(l.b)("wrapper",Object(n.a)({},b,a,{components:t,mdxType:"MDXLayout"}),Object(l.b)("h2",{id:"what-is-a-knowledge-graph"},"What is a Knowledge Graph?"),Object(l.b)("p",null,"A Knowledge Graph is a version-controlled semantic model of a dataset, which is used by Veezoo to understand your question and generate the correct SQL query that answers it."),Object(l.b)("p",null,"It is represented as a set of files using a modelling language called VKL, the Veezoo Knowledge Language."),Object(l.b)("p",null,"The Knowledge Graph is divided into different layers. We will focus here on the two most important ones: ",Object(l.b)("inlineCode",{parentName:"p"},"knowledge-base")," and ",Object(l.b)("inlineCode",{parentName:"p"},"database")," layers."),Object(l.b)("h2",{id:"database-layer"},"Database Layer"),Object(l.b)("p",null,"The ",Object(l.b)("inlineCode",{parentName:"p"},"database")," layer (db) is a very thin layer that contains exactly how the data is stored in the underlying database system."),Object(l.b)("p",null,"It involves concepts like:"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"Schema"),Object(l.b)("li",{parentName:"ul"},"Tables"),Object(l.b)("li",{parentName:"ul"},"Columns"),Object(l.b)("li",{parentName:"ul"},"Primary and foreign keys")),Object(l.b)("h2",{id:"knowledge-base-layer"},"Knowledge Base Layer"),Object(l.b)("p",null,"The ",Object(l.b)("inlineCode",{parentName:"p"},"knowledge-base")," layer (kb) is where the magic happens. The idea behind the kb layer is to model your data semantically, i.e. as if you would be explaining to a person what your database is really about."),Object(l.b)("p",null,"For this modelling, we have to introduce a new vocabulary:"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"Classes"),Object(l.b)("li",{parentName:"ul"},"Entities"),Object(l.b)("li",{parentName:"ul"},"Relations"),Object(l.b)("li",{parentName:"ul"},"Literal types")),Object(l.b)("p",null,"Let's see in detail what each of these things actually mean."),Object(l.b)("h3",{id:"classes-and-entities"},"Classes and Entities"),Object(l.b)("p",null,"If you come from a software background, you may be familiar with the idea of a class as defined in object-oriented programming literature. In some sense, we are making your data more object-oriented.\nSo, a class can be defined as a category of things. The best way to understand it is to go over some examples."),Object(l.b)("p",null,"A class could be something like:"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Customer")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Country")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Company")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Event")," "),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Lead_Status"))),Object(l.b)("p",null,'Now, each of these classes may have instantiations of it. In programming, we call these "objects". In VKL, we call them entities.\nSo following our example, we may have entities like:'),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"entity ",Object(l.b)("inlineCode",{parentName:"li"},"Till_Haug")," of class ",Object(l.b)("inlineCode",{parentName:"li"},"Customer")," "),Object(l.b)("li",{parentName:"ul"},"entity ",Object(l.b)("inlineCode",{parentName:"li"},"Brazil")," of class ",Object(l.b)("inlineCode",{parentName:"li"},"Country")),Object(l.b)("li",{parentName:"ul"},"entity ",Object(l.b)("inlineCode",{parentName:"li"},"Veezoo_AG")," of class ",Object(l.b)("inlineCode",{parentName:"li"},"Company")),Object(l.b)("li",{parentName:"ul"},"entity ",Object(l.b)("inlineCode",{parentName:"li"},"Lost")," of class ",Object(l.b)("inlineCode",{parentName:"li"},"Lead_Status"))),Object(l.b)("p",null,"But what about ",Object(l.b)("inlineCode",{parentName:"p"},"Event"),"? For classes like ",Object(l.b)("inlineCode",{parentName:"p"},"Event"),", ",Object(l.b)("inlineCode",{parentName:"p"},"Transaction")," and ",Object(l.b)("inlineCode",{parentName:"p"},"Order"),", it makes sense usually to model it as a class without entities. Prefer to use classes with entities when there is a way to refer to an individual of this class, e.g. in a question."),Object(l.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(l.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-heading"}),Object(l.b)("h5",{parentName:"div"},Object(l.b)("span",Object(n.a)({parentName:"h5"},{className:"admonition-icon"}),Object(l.b)("svg",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(l.b)("path",Object(n.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"note")),Object(l.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-content"}),Object(l.b)("p",{parentName:"div"},"In case you are wondering, we borrowed the term ",Object(l.b)("inlineCode",{parentName:"p"},"entity")," from the NLP problem known as ",Object(l.b)("a",Object(n.a)({parentName:"p"},{href:"https://en.wikipedia.org/wiki/Entity_linking"}),"Entity Linking"),"."))),Object(l.b)("h3",{id:"literal-types"},"Literal Types"),Object(l.b)("p",null,"Literal types are your usual data types like: numbers, dates, booleans and strings."),Object(l.b)("h3",{id:"relations"},"Relations"),Object(l.b)("p",null,"A relation in VKL describes how classes and other classes or literal types relate to each other. "),Object(l.b)("p",null,"Example:"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Till_Haug")," ",Object(l.b)("em",{parentName:"li"},"works at")," ",Object(l.b)("inlineCode",{parentName:"li"},"Veezoo_AG")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"JP_Monteiro")," ",Object(l.b)("em",{parentName:"li"},"was born on")," ",Object(l.b)("inlineCode",{parentName:"li"},"30th of March 1993")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Brazil")," ",Object(l.b)("em",{parentName:"li"},"has a population of")," ",Object(l.b)("inlineCode",{parentName:"li"},"209'500'000"))),Object(l.b)("p",null,"In other words, we have the following relations:"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"works_at")," is a relation that goes from ",Object(l.b)("inlineCode",{parentName:"li"},"Customer")," to ",Object(l.b)("inlineCode",{parentName:"li"},"Company")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"birthdate")," is a relation that goes from ",Object(l.b)("inlineCode",{parentName:"li"},"Customer")," to the literal type ",Object(l.b)("inlineCode",{parentName:"li"},"date")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"population")," is a relation that goes from ",Object(l.b)("inlineCode",{parentName:"li"},"Customer")," to the literal type ",Object(l.b)("inlineCode",{parentName:"li"},"integer"))),Object(l.b)("p",null,"As you can see, it doesn't really matter whether the relation is defined as a column inside a table or as a foreign key or actually a transformation on top of another column. It is just a relation. This means that 2 completely distinct database schemas can have the same ",Object(l.b)("inlineCode",{parentName:"p"},"knowledge-base")," layout, if they represent the same information. "),Object(l.b)("p",null,"This allows you to decouple how your data is represented in the database (due to whatever reasons like performance, convenience, etc) to what it actually means in the real world. How cool is that!"),Object(l.b)("p",null,"Still, how do the concepts in the ",Object(l.b)("inlineCode",{parentName:"p"},"kb")," layer relate to the ones in the ",Object(l.b)("inlineCode",{parentName:"p"},"db")," layer? Let's see how all this fits together in more detail next with an example!"))}c.isMDXComponent=!0}}]);