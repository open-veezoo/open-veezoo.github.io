(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{66:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return l})),n.d(t,"rightToc",(function(){return c})),n.d(t,"default",(function(){return u}));var r=n(2),a=n(6),i=(n(0),n(96)),o={id:"to-date",title:"to: Date",sidebar_label:"to: Date",slug:"/reference/kb-layer/relation/semantic_link/date"},l={unversionedId:"reference/kb-layer/relation/semantic_link/to-date",id:"reference/kb-layer/relation/semantic_link/to-date",isDocsHomePage:!1,title:"to: Date",description:"Definition",source:"@site/docs/reference/kb-layer/relation/semantic_link/to-date.md",slug:"/reference/kb-layer/relation/semantic_link/date",permalink:"/docs/reference/kb-layer/relation/semantic_link/date",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/reference/kb-layer/relation/semantic_link/to-date.md",version:"current",sidebar_label:"to: Date",sidebar:"docs",previous:{title:"to: Class",permalink:"/docs/reference/kb-layer/relation/semantic_link/class"},next:{title:"to: Double/Integer",permalink:"/docs/reference/kb-layer/relation/semantic_link/double-integer"}},c=[{value:"Definition",id:"definition",children:[]},{value:"Usage",id:"usage",children:[]}],s={rightToc:c};function u(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(i.b)("wrapper",Object(r.a)({},s,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("h2",{id:"definition"},"Definition"),Object(i.b)("p",null,"A Date relation is used whenever you have a column or SQL expression that returns a partial (e.g. Year) or fully qualfied date (e.g. 2020-01-06) or datetime."),Object(i.b)("h2",{id:"usage"},"Usage"),Object(i.b)("p",null,"For Date relations, Veezoo assumes that the ",Object(i.b)("inlineCode",{parentName:"p"},"to_sql")," is a SQL date/datetime expression. This means that in case it is not, you should change ",Object(i.b)("inlineCode",{parentName:"p"},"to_sql")," to be a casting operation in your SQL dialect, e.g. ",Object(i.b)("inlineCode",{parentName:"p"},"to_sql: \"TO_DATE(${ORDERS.date_str}, 'YYYYMMDD')\"")," or directly in your database."),Object(i.b)("p",null,"It is also required to specify the granularity by setting ",Object(i.b)("inlineCode",{parentName:"p"},"datetime_format"),". This is usually inferred by Veezoo when importing your schema. The most common are:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"YearFormat")," (e.g. 2020)"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"DayFormat")," (e.g. 2020-10-01)"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"TimeFormat")," (e.g. 2020-10-01 13:00:00)")),Object(i.b)("p",null,"File: ",Object(i.b)("em",{parentName:"p"},"hitchhiker/knowledge-base/classes/Order.vkl")),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-json"}),'import: [\n    db.postgres.movie_db.public.ORDERS\n]\n\nkb {\n\n    class Order {\n\n        ...\n\n        relation Order_Date {\n            name.en: "Order Date"\n            tag: KB_Many2One\n            to: Date\n\n            datetime_format: DayFormat\n\n            semantic_link: {\n                to_sql: "${ORDERS.order_date}"\n            }\n        }\n    }\n}\n')))}u.isMDXComponent=!0},96:function(e,t,n){"use strict";n.d(t,"a",(function(){return b})),n.d(t,"b",(function(){return m}));var r=n(0),a=n.n(r);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=a.a.createContext({}),u=function(e){var t=a.a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},b=function(e){var t=u(e.components);return a.a.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},d=a.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),b=u(n),d=r,m=b["".concat(o,".").concat(d)]||b[d]||p[d]||i;return n?a.a.createElement(m,l(l({ref:t},s),{},{components:n})):a.a.createElement(m,l({ref:t},s))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=d;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var s=2;s<i;s++)o[s]=n[s];return a.a.createElement.apply(null,o)}return a.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"}}]);