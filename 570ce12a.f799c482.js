(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{67:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return r})),t.d(n,"metadata",(function(){return l})),t.d(n,"rightToc",(function(){return s})),t.d(n,"default",(function(){return c}));var a=t(2),i=t(6),o=(t(0),t(96)),r={id:"intermediate-tables-and-multi-joins",title:"Intermediate Tables and Multi-Joins",sidebar_label:"Intermediate Tables and Multi-Joins",slug:"/reference/kb-layer/relation/sql/intermediate-tables-and-multi-joins"},l={unversionedId:"reference/kb-layer/relation/sql/intermediate-tables-and-multi-joins",id:"reference/kb-layer/relation/sql/intermediate-tables-and-multi-joins",isDocsHomePage:!1,title:"Intermediate Tables and Multi-Joins",description:"Definition",source:"@site/docs/reference/kb-layer/relation/sql/intermediate-tables-and-multi-joins.md",slug:"/reference/kb-layer/relation/sql/intermediate-tables-and-multi-joins",permalink:"/docs/reference/kb-layer/relation/sql/intermediate-tables-and-multi-joins",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/reference/kb-layer/relation/sql/intermediate-tables-and-multi-joins.md",version:"current",sidebar_label:"Intermediate Tables and Multi-Joins",sidebar:"docs",previous:{title:"to: String",permalink:"/docs/reference/kb-layer/relation/sql/string"}},s=[{value:"Definition",id:"definition",children:[]},{value:"Usage",id:"usage",children:[{value:"Intermediate Table",id:"intermediate-table",children:[]},{value:"Multi-Joins",id:"multi-joins",children:[]},{value:"Advanced Joins",id:"advanced-joins",children:[]}]}],b={rightToc:s};function c(e){var n=e.components,t=Object(i.a)(e,["components"]);return Object(o.b)("wrapper",Object(a.a)({},b,t,{components:n,mdxType:"MDXLayout"}),Object(o.b)("h2",{id:"definition"},"Definition"),Object(o.b)("p",null,"In some situations, your data schema may contain intermediate tables (a.k.a. junction tables), which represent many-to-many relations."),Object(o.b)("p",null,"However, these tables can be confusing for Business Users to understand, since they only serve a purely relational modelling purpose and not a business concept per se."),Object(o.b)("p",null,"Let's look into some example of schemas that we would like to simplify to our business users over Veezoo."),Object(o.b)("h2",{id:"usage"},"Usage"),Object(o.b)("h3",{id:"intermediate-table"},"Intermediate Table"),Object(o.b)("p",null,"A very common kind of modelling in relational databases is that of an intermediate table with two foreign keys (and optionally a primary key)."),Object(o.b)("p",null,"Example: A table ",Object(o.b)("inlineCode",{parentName:"p"},"CUSTOMER_LANGUAGE(customer_id, language_id)")," that specifies the languages that a customer speaks, by using two foreign keys."),Object(o.b)("p",null,"In this case, this is how we would model it in Veezoo:"),Object(o.b)("p",null,"File: ",Object(o.b)("em",{parentName:"p"},"hitchhiker/knowledge-base/classes/Customer.vkl")),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-json"}),'import: [\n    db.postgres.movie_db.public.CUSTOMER,\n    db.postgres.movie_db.public.CUSTOMER_LANGUAGE\n]\n\nkb {\n\n    class Customer {\n        name.en: "Customer"\n        sql: "${CUSTOMER.id}"\n        \n        relation speaks_Language {\n            display_name.en: "speaks"\n            \n            tag: KB_Many2Many\n\n            to: kb.Language\n\n            // CUSTOMER -> CUSTOMER_LANGUAGE\n            join: [\n              "${CUSTOMER.id} = ${CUSTOMER_LANGUAGE.customer_id}"\n            ]\n\n            // this is used to join with LANGUAGE.id (the sql for kb.Language)\n            sql: "${CUSTOMER_LANGUAGE.language_id}"\n        }\n    }\n}\n')),Object(o.b)("p",null,"First of all, we needed to add to our ",Object(o.b)("inlineCode",{parentName:"p"},"import")," another table reference, namely to ",Object(o.b)("inlineCode",{parentName:"p"},"CUSTOMER_LANGUAGE"),", so we can use its shorthand form."),Object(o.b)("p",null,"Similarly to the case of Foreign Keys described in the ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"class"}),"sql Overview for Class Relations"),", we also need to specify the ",Object(o.b)("inlineCode",{parentName:"p"},"sql")," here."),Object(o.b)("p",null,"Additionally, we see for the first time the usage of ",Object(o.b)("inlineCode",{parentName:"p"},"join"),". A relation always goes from the parent class (e.g. ",Object(o.b)("inlineCode",{parentName:"p"},"kb.Customer"),") to another class (e.g. ",Object(o.b)("inlineCode",{parentName:"p"},"kb.Language"),") or literal type. Since the join path goes over an intermediate table, we need to specify how we get to the final ",Object(o.b)("inlineCode",{parentName:"p"},"CUSTOMER_LANGUAGE")," table, namely first over the ",Object(o.b)("inlineCode",{parentName:"p"},"customer_id")," foreign key."),Object(o.b)("p",null,"Notice that the ",Object(o.b)("inlineCode",{parentName:"p"},"join")," is always defined as an Array of SQL Expressions, even if there is only one join needed."),Object(o.b)("p",null,"Finally, notice that this relation has an explicit ",Object(o.b)("inlineCode",{parentName:"p"},"tag")," set, in contrast to most of our relations. ",Object(o.b)("inlineCode",{parentName:"p"},"KB_Many2Many")," specifies that this is a many-to-many relation, i.e. that customers may speak multiple languages and that languages may be spoken by multiple customers. The default is ",Object(o.b)("inlineCode",{parentName:"p"},"KB_Many2One")," and is used when nothing is set."),Object(o.b)("p",null,"Now, there is nothing special about this two foreign keys case. Maybe your intermediate table contains actually a numeric column, a date, boolean, instead of a second foreign key."),Object(o.b)("p",null,"Let's say we have a table like ",Object(o.b)("inlineCode",{parentName:"p"},"CUSTOMER_EXTRA(customer_id, age)"),". Following the same idea, we can have a new relation defined like this:"),Object(o.b)("p",null,"File: ",Object(o.b)("em",{parentName:"p"},"hitchhiker/knowledge-base/classes/Customer.vkl")),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-json"}),'import: [\n    db.postgres.movie_db.public.CUSTOMER,\n    db.postgres.movie_db.public.CUSTOMER_EXTRA\n]\n\nkb {\n\n    class Customer {\n        name.en: "Customer"\n        sql: "${CUSTOMER.id}"\n\n        relation Age {\n            name.en: "Age"\n            to: Integer\n\n            // CUSTOMER -> CUSTOMER_EXTRA\n            join: [\n              "${CUSTOMER.id} = ${CUSTOMER_EXTRA.customer_id}"\n            ]\n\n            sql: "${CUSTOMER_EXTRA.age}"\n        }\n    }\n}\n')),Object(o.b)("h3",{id:"multi-joins"},"Multi-Joins"),Object(o.b)("p",null,"If the schema is more complicated, we may need to go over several intermediate tables to find the information we need."),Object(o.b)("p",null,"Let's look at the following artificial example with tables ",Object(o.b)("inlineCode",{parentName:"p"},"CUSTOMER(id, name)"),", ",Object(o.b)("inlineCode",{parentName:"p"},"CUSTOMER_INFO(customer_id, customer_extra_id)"),", ",Object(o.b)("inlineCode",{parentName:"p"},"CUSTOMER_EXTRA(id, age)"),"."),Object(o.b)("p",null,"In this case, we will need to define how the path of ",Object(o.b)("inlineCode",{parentName:"p"},"join")," needs to be performed."),Object(o.b)("p",null,"File: ",Object(o.b)("em",{parentName:"p"},"hitchhiker/knowledge-base/classes/Customer.vkl")),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-json"}),'import: [\n    db.postgres.movie_db.public.CUSTOMER,\n    db.postgres.movie_db.public.CUSTOMER_INFO,\n    db.postgres.movie_db.public.CUSTOMER_EXTRA\n]\n\nkb {\n\n    class Customer {\n        name.en: "Customer"\n        sql: "${CUSTOMER.id}"\n\n        relation Age {\n            name.en: "Age"\n            to: Integer\n\n            // CUSTOMER -> CUSTOMER_INFO -> CUSTOMER_EXTRA\n            join: [\n             "${CUSTOMER.id} = ${CUSTOMER_INFO.customer_id}", \n             "${CUSTOMER_INFO.customer_extra_id} = ${CUSTOMER_EXTRA.id}"\n            ]\n\n            sql: "${CUSTOMER_EXTRA.age}"\n        }\n    }\n}\n')),Object(o.b)("p",null,"If you need even more joins, just define them inside the array. Also, don't forget to add the table to the ",Object(o.b)("inlineCode",{parentName:"p"},"import")," statement at the top."),Object(o.b)("h3",{id:"advanced-joins"},"Advanced Joins"),Object(o.b)("p",null,"Finally, your Join may not be of the form 'column A = column B'. Still, with VKL you can put whatever fancy SQL expression you want for the join."),Object(o.b)("p",null,"Let's take the following example."),Object(o.b)("p",null,"We have the tables ",Object(o.b)("inlineCode",{parentName:"p"},"CUSTOMER(id, name, private_id, company_id, segment_valid)")," and ",Object(o.b)("inlineCode",{parentName:"p"},"CUSTOMER_SEGMENT_INFO(id, website)"),", where ",Object(o.b)("inlineCode",{parentName:"p"},"private_id")," and ",Object(o.b)("inlineCode",{parentName:"p"},"company_id")," are foreign keys to ",Object(o.b)("inlineCode",{parentName:"p"},"CUSTOMER_SEGMENT_INFO"),", but only one is set at a time and the reference only makes sense if ",Object(o.b)("inlineCode",{parentName:"p"},"segment_valid")," is set to 1, because... why not. And we want in the end to get the website."),Object(o.b)("p",null,"This is how it will look like:"),Object(o.b)("p",null,"File: ",Object(o.b)("em",{parentName:"p"},"hitchhiker/knowledge-base/classes/Customer.vkl")),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-json"}),'import: [\n    db.postgres.movie_db.public.CUSTOMER,\n    db.postgres.movie_db.public.CUSTOMER_SEGMENT_INFO\n]\n\nkb {\n\n    class Customer {\n        name.en: "Customer"\n        sql: "${CUSTOMER.id}"\n\n        relation Website {\n            name.en: "Website"\n            to: String\n\n            // CUSTOMER -> CUSTOMER_SEGMENT_INFO\n            join: [\n              "COALESCE(${CUSTOMER.private_id}, ${CUSTOMER.company_id}) = ${CUSTOMER_SEGMENT_INFO.id} AND ${CUSTOMER.segment_valid} = 1"\n            ]\n\n            sql: "${CUSTOMER_SEGMENT_INFO.website}"\n        }\n    }\n}\n')))}c.isMDXComponent=!0},96:function(e,n,t){"use strict";t.d(n,"a",(function(){return d})),t.d(n,"b",(function(){return u}));var a=t(0),i=t.n(a);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var b=i.a.createContext({}),c=function(e){var n=i.a.useContext(b),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},d=function(e){var n=c(e.components);return i.a.createElement(b.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return i.a.createElement(i.a.Fragment,{},n)}},m=i.a.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,r=e.parentName,b=s(e,["components","mdxType","originalType","parentName"]),d=c(t),m=a,u=d["".concat(r,".").concat(m)]||d[m]||p[m]||o;return t?i.a.createElement(u,l(l({ref:n},b),{},{components:t})):i.a.createElement(u,l({ref:n},b))}));function u(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,r=new Array(o);r[0]=m;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,r[1]=l;for(var b=2;b<o;b++)r[b]=t[b];return i.a.createElement.apply(null,r)}return i.a.createElement.apply(null,t)}m.displayName="MDXCreateElement"}}]);