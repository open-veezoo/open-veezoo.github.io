(window.webpackJsonp=window.webpackJsonp||[]).push([[3],{52:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return o})),t.d(n,"metadata",(function(){return l})),t.d(n,"rightToc",(function(){return s})),t.d(n,"default",(function(){return b}));var a=t(2),i=t(6),r=(t(0),t(92)),o={id:"intermediate-tables-and-multi-joins",title:"Intermediate Tables and Multi-Joins",sidebar_label:"Intermediate Tables and Multi-Joins",slug:"/reference/kb-layer/relation/semantic_link/intermediate-tables-and-multi-joins"},l={unversionedId:"reference/kb-layer/relation/semantic_link/intermediate-tables-and-multi-joins",id:"reference/kb-layer/relation/semantic_link/intermediate-tables-and-multi-joins",isDocsHomePage:!1,title:"Intermediate Tables and Multi-Joins",description:"Definition",source:"@site/docs/reference/kb-layer/relation/semantic_link/intermediate-tables-and-multi-joins.md",slug:"/reference/kb-layer/relation/semantic_link/intermediate-tables-and-multi-joins",permalink:"/docs/reference/kb-layer/relation/semantic_link/intermediate-tables-and-multi-joins",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/reference/kb-layer/relation/semantic_link/intermediate-tables-and-multi-joins.md",version:"current",sidebar_label:"Intermediate Tables and Multi-Joins",sidebar:"docs",previous:{title:"to: String",permalink:"/docs/reference/kb-layer/relation/semantic_link/string"}},s=[{value:"Definition",id:"definition",children:[]},{value:"Usage",id:"usage",children:[{value:"Intermediate Table",id:"intermediate-table",children:[]},{value:"Multi-Joins",id:"multi-joins",children:[]}]}],c={rightToc:s};function b(e){var n=e.components,t=Object(i.a)(e,["components"]);return Object(r.b)("wrapper",Object(a.a)({},c,t,{components:n,mdxType:"MDXLayout"}),Object(r.b)("h2",{id:"definition"},"Definition"),Object(r.b)("p",null,"In some situations, your data schema may contain intermediate tables (a.k.a. junction tables), which represent many-to-many relations."),Object(r.b)("p",null,"However, these tables can be confusing for Business Users to understand, since they only serve a purely relational modelling purpose and not a business concept per se."),Object(r.b)("p",null,"Let's look into some example of schemas that we would like to simplify to our business users over Veezoo."),Object(r.b)("h2",{id:"usage"},"Usage"),Object(r.b)("h3",{id:"intermediate-table"},"Intermediate Table"),Object(r.b)("p",null,"A very common kind of modelling in relational databases is that of an intermediate table with two foreign keys (and optionally a primary key)."),Object(r.b)("p",null,"Example: A table ",Object(r.b)("inlineCode",{parentName:"p"},"CUSTOMER_LANGUAGE(customer_id, language_id)")," that specifies the languages that a customer speaks, by using two foreign keys."),Object(r.b)("p",null,"In this case, this is how we would model it in Veezoo:"),Object(r.b)("p",null,"File: ",Object(r.b)("em",{parentName:"p"},"hitchhiker/knowledge-base/classes/Customer.vkl")),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-json"}),'import: [\n    db.postgres.movie_db.public.CUSTOMER,\n    db.postgres.movie_db.public.CUSTOMER_LANGUAGE\n]\n\nkb {\n\n    class Customer {\n        name.en: "Customer"\n        semantic_link: {\n            ...\n            id_sql: "${CUSTOMER.id}"\n        }\n\n        relation speaks_Language {\n            display_name.en: "speaks"\n            tag: KB_Many2Many\n            to: kb.Language\n            semantic_link: {\n                from_sql: "${CUSTOMER_LANGUAGE.customer_id}"\n                to_sql: "${CUSTOMER_LANGUAGE.language_id}"\n            }\n        }\n    }\n}\n')),Object(r.b)("p",null,"First of all, we needed to add to our ",Object(r.b)("inlineCode",{parentName:"p"},"import")," another table reference, namely to ",Object(r.b)("inlineCode",{parentName:"p"},"CUSTOMER_LANGUAGE"),", so we can use its shorthand form."),Object(r.b)("p",null,"Similarly to the case of Foreign Keys described in the ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"class"}),"semantic_link Overview for Class Relations"),", we also need to specify the ",Object(r.b)("inlineCode",{parentName:"p"},"to_sql")," here."),Object(r.b)("p",null,"Additionally, we see for the first time the usage of ",Object(r.b)("inlineCode",{parentName:"p"},"from_sql"),". A relation always goes ",Object(r.b)("em",{parentName:"p"},"from")," a class ",Object(r.b)("em",{parentName:"p"},"to")," a class or literal type. So, analogously to ",Object(r.b)("inlineCode",{parentName:"p"},"to_sql"),", the ",Object(r.b)("inlineCode",{parentName:"p"},"from_sql")," property specifies how Veezoo should join with the class our relation is in, in this case ",Object(r.b)("inlineCode",{parentName:"p"},"kb.Customer"),"."),Object(r.b)("p",null,"Finally, notice that this relation has a different ",Object(r.b)("inlineCode",{parentName:"p"},"tag")," than most of our relations. ",Object(r.b)("inlineCode",{parentName:"p"},"KB_Many2Many")," specifies that this is a many-to-many relation, i.e. that customers may speak multiple languages and that languages may be spoken by multiple customers."),Object(r.b)("p",null,"Now, there is nothing special about this two foreign keys case. Maybe your intermediate table contains actually a numeric column, a date, boolean, instead of a second foreign key."),Object(r.b)("p",null,"Let's say we have a table like ",Object(r.b)("inlineCode",{parentName:"p"},"CUSTOMER_EXTRA(customer_id, age)"),". Following the same idea, we can have a new relation defined like this:"),Object(r.b)("p",null,"File: ",Object(r.b)("em",{parentName:"p"},"hitchhiker/knowledge-base/classes/Customer.vkl")),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-json"}),'import: [\n    db.postgres.movie_db.public.CUSTOMER,\n    db.postgres.movie_db.public.CUSTOMER_EXTRA\n]\n\nkb {\n\n    class Customer {\n        name.en: "Customer"\n        semantic_link: {\n            ...\n            id_sql: "${CUSTOMER.id}"\n        }\n\n        relation Age {\n            name.en: "Age"\n            tag: KB_Many2One\n            to: Integer\n            semantic_link: {\n                from_sql: "${CUSTOMER_EXTRA.customer_id}"\n                to_sql: "${CUSTOMER_EXTRA.age}"\n            }\n        }\n    }\n}\n')),Object(r.b)("h3",{id:"multi-joins"},"Multi-Joins"),Object(r.b)("p",null,"If the schema is more complicated, we may need to go over several intermediate tables to find the information we need."),Object(r.b)("p",null,"Let's look at the following artificial example with tables ",Object(r.b)("inlineCode",{parentName:"p"},"CUSTOMER(id, name)"),", ",Object(r.b)("inlineCode",{parentName:"p"},"CUSTOMER_INFO(customer_id, customer_extra_id)"),", ",Object(r.b)("inlineCode",{parentName:"p"},"CUSTOMER_EXTRA(id, age)"),"."),Object(r.b)("p",null,"In this case, we will need to define how the path of ",Object(r.b)("inlineCode",{parentName:"p"},"join")," needs to be performed."),Object(r.b)("p",null,"File: ",Object(r.b)("em",{parentName:"p"},"hitchhiker/knowledge-base/classes/Customer.vkl")),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-json"}),'import: [\n    db.postgres.movie_db.public.CUSTOMER,\n    db.postgres.movie_db.public.CUSTOMER_INFO,\n    db.postgres.movie_db.public.CUSTOMER_EXTRA\n]\n\nkb {\n\n    class Customer {\n        name.en: "Customer"\n        semantic_link: {\n            ...\n            id_sql: "${CUSTOMER.id}"\n        }\n\n        relation Age {\n            name.en: "Age"\n            tag: KB_Many2One\n            to: Integer\n            semantic_link: {\n                from_sql: "${CUSTOMER_INFO.customer_id}"\n                join: [\n                    "${CUSTOMER_INFO.customer_extra_id} = ${CUSTOMER_EXTRA.id}"\n                ]\n                to_sql: "${CUSTOMER_EXTRA.age}"\n            }\n        }\n    }\n}\n')),Object(r.b)("p",null,"If you need even more joins, just define them inside the array. The ",Object(r.b)("inlineCode",{parentName:"p"},"join")," is always defined as an Array of SQL Expressions, even if there is only one join needed. Also, don't forget to add the table to the ",Object(r.b)("inlineCode",{parentName:"p"},"import")," statement at the top."))}b.isMDXComponent=!0},92:function(e,n,t){"use strict";t.d(n,"a",(function(){return m})),t.d(n,"b",(function(){return u}));var a=t(0),i=t.n(a);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var c=i.a.createContext({}),b=function(e){var n=i.a.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},m=function(e){var n=b(e.components);return i.a.createElement(c.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return i.a.createElement(i.a.Fragment,{},n)}},p=i.a.forwardRef((function(e,n){var t=e.components,a=e.mdxType,r=e.originalType,o=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),m=b(t),p=a,u=m["".concat(o,".").concat(p)]||m[p]||d[p]||r;return t?i.a.createElement(u,l(l({ref:n},c),{},{components:t})):i.a.createElement(u,l({ref:n},c))}));function u(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var r=t.length,o=new Array(r);o[0]=p;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var c=2;c<r;c++)o[c]=t[c];return i.a.createElement.apply(null,o)}return i.a.createElement.apply(null,t)}p.displayName="MDXCreateElement"}}]);