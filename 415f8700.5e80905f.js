(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{68:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return i})),t.d(n,"metadata",(function(){return l})),t.d(n,"rightToc",(function(){return c})),t.d(n,"default",(function(){return s}));var r=t(2),o=t(6),a=(t(0),t(96)),i={id:"to-double-integer",title:"to: Double/Integer",sidebar_label:"to: Double/Integer",slug:"/reference/kb-layer/relation/semantic_link/double-integer"},l={unversionedId:"reference/kb-layer/relation/semantic_link/to-double-integer",id:"reference/kb-layer/relation/semantic_link/to-double-integer",isDocsHomePage:!1,title:"to: Double/Integer",description:"Definition",source:"@site/docs/reference/kb-layer/relation/semantic_link/to-double-integer.md",slug:"/reference/kb-layer/relation/semantic_link/double-integer",permalink:"/docs/reference/kb-layer/relation/semantic_link/double-integer",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/reference/kb-layer/relation/semantic_link/to-double-integer.md",version:"current",sidebar_label:"to: Double/Integer",sidebar:"docs",previous:{title:"to: Date",permalink:"/docs/reference/kb-layer/relation/semantic_link/date"},next:{title:"to: Boolean",permalink:"/docs/reference/kb-layer/relation/semantic_link/boolean"}},c=[{value:"Definition",id:"definition",children:[]},{value:"Usage",id:"usage",children:[]}],u={rightToc:c};function s(e){var n=e.components,t=Object(o.a)(e,["components"]);return Object(a.b)("wrapper",Object(r.a)({},u,t,{components:n,mdxType:"MDXLayout"}),Object(a.b)("h2",{id:"definition"},"Definition"),Object(a.b)("p",null,"A Numeric relation is used whenever you have a column or SQL expression that returns a number, e.g. an integer or a double."),Object(a.b)("h2",{id:"usage"},"Usage"),Object(a.b)("p",null,"File: ",Object(a.b)("em",{parentName:"p"},"hitchhiker/knowledge-base/classes/Order.vkl")),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-json"}),'import: [\n    db.postgres.movie_db.public.ORDERS\n]\n\nkb {\n\n    class Order {\n\n        ...\n\n        relation order_total {\n            name.en: "Order Total"\n            synonym.en: ["Price", "Revenue", "Amount"]\n            tag: KB_Many2One\n            to: Double\n\n            unit: onto.Currency.USD\n\n            semantic_link: {\n                to_sql: "${ORDERS.order_total}"\n            }\n        }    \n    }\n}\n')),Object(a.b)("p",null,"Notice the ",Object(a.b)("a",Object(r.a)({parentName:"p"},{href:"../unit"}),"unit")," parameter, which allows Veezoo to display the value in the appropriate format to the user."),Object(a.b)("p",null,"As with the other kinds of relations, you can also apply any kind of compatible SQL transformation inside ",Object(a.b)("inlineCode",{parentName:"p"},"to_sql"),"."),Object(a.b)("p",null,"Let's say instead that your column ",Object(a.b)("inlineCode",{parentName:"p"},"ORDERS.order_total")," contain values in different currencies (USD, CHF, EUR), specified in the column ",Object(a.b)("inlineCode",{parentName:"p"},"ORDERS.currency"),".\nNow, summing these values up wouldn't make any sense. So we define a new relation ",Object(a.b)("inlineCode",{parentName:"p"},"order_total_EUR"),", which converts the values according to a fixed exchange rate."),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-json"}),'import: [\n    db.postgres.movie_db.public.ORDERS\n]\n\nkb {\n\n    class Order {\n\n        ...\n\n        relation order_total_EUR {\n            name.en: "Order Total (EUR)"\n            synonym.en: ["Price", "Revenue", "Order Total"]\n            tag: KB_Many2One\n            to: Double\n\n            unit: onto.Currency.EUR\n\n            semantic_link: {\n                to_sql: """\n                    CASE ${ORDERS.currency}\n                       WHEN \'USD\' THEN ${ORDERS.order_total} * 0.83\n                       WHEN \'CHF\' THEN ${ORDERS.order_total} * 0.92\n                       ELSE ${ORDERS.order_total}\n                    END   \n                """\n            }\n        }    \n    }\n}\n')))}s.isMDXComponent=!0},96:function(e,n,t){"use strict";t.d(n,"a",(function(){return b})),t.d(n,"b",(function(){return m}));var r=t(0),o=t.n(r);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var u=o.a.createContext({}),s=function(e){var n=o.a.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},b=function(e){var n=s(e.components);return o.a.createElement(u.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return o.a.createElement(o.a.Fragment,{},n)}},d=o.a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,i=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),b=s(t),d=r,m=b["".concat(i,".").concat(d)]||b[d]||p[d]||a;return t?o.a.createElement(m,l(l({ref:n},u),{},{components:t})):o.a.createElement(m,l({ref:n},u))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,i=new Array(a);i[0]=d;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var u=2;u<a;u++)i[u]=t[u];return o.a.createElement.apply(null,i)}return o.a.createElement.apply(null,t)}d.displayName="MDXCreateElement"}}]);