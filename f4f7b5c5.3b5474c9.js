(window.webpackJsonp=window.webpackJsonp||[]).push([[36],{102:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return m}));var r=n(0),o=n.n(r);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=o.a.createContext({}),u=function(e){var t=o.a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=u(e.components);return o.a.createElement(s.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},d=o.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,i=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),p=u(n),d=r,m=p["".concat(i,".").concat(d)]||p[d]||b[d]||a;return n?o.a.createElement(m,l(l({ref:t},s),{},{components:n})):o.a.createElement(m,l({ref:t},s))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,i=new Array(a);i[0]=d;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var s=2;s<a;s++)i[s]=n[s];return o.a.createElement.apply(null,i)}return o.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},96:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return l})),n.d(t,"rightToc",(function(){return c})),n.d(t,"default",(function(){return u}));var r=n(2),o=n(6),a=(n(0),n(102)),i={id:"to-string",title:"to: String",sidebar_label:"to: String",slug:"/reference/kb-layer/relation/sql/string"},l={unversionedId:"reference/kb-layer/relation/sql/to-string",id:"reference/kb-layer/relation/sql/to-string",isDocsHomePage:!1,title:"to: String",description:"Definition",source:"@site/docs/reference/kb-layer/relation/sql/to-string.md",slug:"/reference/kb-layer/relation/sql/string",permalink:"/docs/reference/kb-layer/relation/sql/string",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/reference/kb-layer/relation/sql/to-string.md",version:"current",sidebar_label:"to: String",sidebar:"docs",previous:{title:"to: Boolean",permalink:"/docs/reference/kb-layer/relation/sql/boolean"},next:{title:"Intermediate Tables and Multi-Joins",permalink:"/docs/reference/kb-layer/relation/sql/intermediate-tables-and-multi-joins"}},c=[{value:"Definition",id:"definition",children:[]},{value:"Usage",id:"usage",children:[]}],s={rightToc:c};function u(e){var t=e.components,n=Object(o.a)(e,["components"]);return Object(a.b)("wrapper",Object(r.a)({},s,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)("h2",{id:"definition"},"Definition"),Object(a.b)("p",null,"A String relation is used whenever you have a column or SQL expression that returns free-text, a URL, Email or any other textual information that you may want to search on, but not refer to its values explicitly."),Object(a.b)("h2",{id:"usage"},"Usage"),Object(a.b)("p",null,"Let's take the example of an e-commerce shop and look at a column in our database for ",Object(a.b)("inlineCode",{parentName:"p"},"returned_comment"),", so whenever customers return an order, they can specify why in free-text. In this case, it is not natural to model it as a class with entities. A comment doesn't have a name for you to refer to it in a question. But still you may want to explore its contents. "),Object(a.b)("p",null,"This is how we would model it in the Knowledge Graph:"),Object(a.b)("p",null,"File: ",Object(a.b)("em",{parentName:"p"},"hitchhiker/knowledge-base/classes/Order.vkl")),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-json"}),'import: [\n    db.postgres.movie_db.public.ORDERS\n]\n\nkb {\n\n    class Order {\n\n        ...\n\n        relation comment {\n            name.en: "Comment"\n            synonym.en: ["Returned Comment", "Complaint", "Feedback"]\n            \n            to: String\n\n            sql: "${ORDERS.returned_comment}"\n        }\n    }\n}\n')),Object(a.b)("p",null,"That's it. Like this, you can ask questions involving text search operations, e.g. \"how many customers complained about 'damaged' orders last week?\"."))}u.isMDXComponent=!0}}]);